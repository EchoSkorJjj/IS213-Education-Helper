// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: subscriptions.proto
#ifndef GRPC_subscriptions_2eproto__INCLUDED
#define GRPC_subscriptions_2eproto__INCLUDED

#include "subscriptions.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace subscription_pb {

class Subscription final {
 public:
  static constexpr char const* service_full_name() {
    return "subscription_pb.Subscription";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>> AsyncCreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>>(AsyncCreateOrUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>> PrepareAsyncCreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>>(PrepareAsyncCreateOrUpdateSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::subscription_pb::GetSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::subscription_pb::DeleteSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::subscription_pb::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>> AsyncCheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>* AsyncCreateOrUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::CreateOrUpdateSubscriptionResponse>* PrepareAsyncCreateOrUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::DeleteSubscriptionResponse>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::subscription_pb::HealthCheckResponse>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>> AsyncCreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>>(AsyncCreateOrUpdateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>> PrepareAsyncCreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>>(PrepareAsyncCreateOrUpdateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::subscription_pb::GetSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::subscription_pb::DeleteSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::subscription_pb::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>> AsyncCheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrUpdateSubscription(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSubscription(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckHealth(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>* AsyncCreateOrUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::CreateOrUpdateSubscriptionResponse>* PrepareAsyncCreateOrUpdateSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::DeleteSubscriptionResponse>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::subscription_pb::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::subscription_pb::HealthCheckResponse>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::subscription_pb::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrUpdateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHealth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response);
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response);
    virtual ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrUpdateSubscription(::grpc::ServerContext* context, ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::subscription_pb::CreateOrUpdateSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::subscription_pb::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::subscription_pb::GetSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::subscription_pb::DeleteSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::subscription_pb::DeleteSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::subscription_pb::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::subscription_pb::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrUpdateSubscription<WithAsyncMethod_GetSubscription<WithAsyncMethod_DeleteSubscription<WithAsyncMethod_CheckHealth<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::subscription_pb::CreateOrUpdateSubscriptionRequest, ::subscription_pb::CreateOrUpdateSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* request, ::subscription_pb::CreateOrUpdateSubscriptionResponse* response) { return this->CreateOrUpdateSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrUpdateSubscription(
        ::grpc::MessageAllocator< ::subscription_pb::CreateOrUpdateSubscriptionRequest, ::subscription_pb::CreateOrUpdateSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::subscription_pb::CreateOrUpdateSubscriptionRequest, ::subscription_pb::CreateOrUpdateSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrUpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::subscription_pb::GetSubscriptionRequest, ::subscription_pb::GetSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::subscription_pb::GetSubscriptionRequest* request, ::subscription_pb::GetSubscriptionResponse* response) { return this->GetSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscription(
        ::grpc::MessageAllocator< ::subscription_pb::GetSubscriptionRequest, ::subscription_pb::GetSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::subscription_pb::GetSubscriptionRequest, ::subscription_pb::GetSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::subscription_pb::DeleteSubscriptionRequest, ::subscription_pb::DeleteSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::subscription_pb::DeleteSubscriptionRequest* request, ::subscription_pb::DeleteSubscriptionResponse* response) { return this->DeleteSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSubscription(
        ::grpc::MessageAllocator< ::subscription_pb::DeleteSubscriptionRequest, ::subscription_pb::DeleteSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::subscription_pb::DeleteSubscriptionRequest, ::subscription_pb::DeleteSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::subscription_pb::HealthCheckRequest, ::subscription_pb::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::subscription_pb::HealthCheckRequest* request, ::subscription_pb::HealthCheckResponse* response) { return this->CheckHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHealth(
        ::grpc::MessageAllocator< ::subscription_pb::HealthCheckRequest, ::subscription_pb::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::subscription_pb::HealthCheckRequest, ::subscription_pb::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateOrUpdateSubscription<WithCallbackMethod_GetSubscription<WithCallbackMethod_DeleteSubscription<WithCallbackMethod_CheckHealth<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrUpdateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrUpdateSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrUpdateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrUpdateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrUpdateSubscription() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::subscription_pb::CreateOrUpdateSubscriptionRequest, ::subscription_pb::CreateOrUpdateSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::subscription_pb::CreateOrUpdateSubscriptionRequest, ::subscription_pb::CreateOrUpdateSubscriptionResponse>* streamer) {
                       return this->StreamedCreateOrUpdateSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrUpdateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrUpdateSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::CreateOrUpdateSubscriptionRequest* /*request*/, ::subscription_pb::CreateOrUpdateSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrUpdateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::subscription_pb::CreateOrUpdateSubscriptionRequest,::subscription_pb::CreateOrUpdateSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscription() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::subscription_pb::GetSubscriptionRequest, ::subscription_pb::GetSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::subscription_pb::GetSubscriptionRequest, ::subscription_pb::GetSubscriptionResponse>* streamer) {
                       return this->StreamedGetSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::GetSubscriptionRequest* /*request*/, ::subscription_pb::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::subscription_pb::GetSubscriptionRequest,::subscription_pb::GetSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::subscription_pb::DeleteSubscriptionRequest, ::subscription_pb::DeleteSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::subscription_pb::DeleteSubscriptionRequest, ::subscription_pb::DeleteSubscriptionResponse>* streamer) {
                       return this->StreamedDeleteSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::subscription_pb::DeleteSubscriptionRequest* /*request*/, ::subscription_pb::DeleteSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::subscription_pb::DeleteSubscriptionRequest,::subscription_pb::DeleteSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::subscription_pb::HealthCheckRequest, ::subscription_pb::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::subscription_pb::HealthCheckRequest, ::subscription_pb::HealthCheckResponse>* streamer) {
                       return this->StreamedCheckHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::subscription_pb::HealthCheckRequest* /*request*/, ::subscription_pb::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::subscription_pb::HealthCheckRequest,::subscription_pb::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrUpdateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_CheckHealth<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrUpdateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_CheckHealth<Service > > > > StreamedService;
};

}  // namespace subscription_pb


#endif  // GRPC_subscriptions_2eproto__INCLUDED
