// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscriptions.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_subscriptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_subscriptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/wrappers.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_subscriptions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_subscriptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_subscriptions_2eproto;
namespace subscription_pb {
class CreateOrUpdateSubscriptionRequest;
struct CreateOrUpdateSubscriptionRequestDefaultTypeInternal;
extern CreateOrUpdateSubscriptionRequestDefaultTypeInternal _CreateOrUpdateSubscriptionRequest_default_instance_;
class CreateOrUpdateSubscriptionResponse;
struct CreateOrUpdateSubscriptionResponseDefaultTypeInternal;
extern CreateOrUpdateSubscriptionResponseDefaultTypeInternal _CreateOrUpdateSubscriptionResponse_default_instance_;
class DeleteSubscriptionRequest;
struct DeleteSubscriptionRequestDefaultTypeInternal;
extern DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
class DeleteSubscriptionResponse;
struct DeleteSubscriptionResponseDefaultTypeInternal;
extern DeleteSubscriptionResponseDefaultTypeInternal _DeleteSubscriptionResponse_default_instance_;
class GetSubscriptionRequest;
struct GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetSubscriptionResponse;
struct GetSubscriptionResponseDefaultTypeInternal;
extern GetSubscriptionResponseDefaultTypeInternal _GetSubscriptionResponse_default_instance_;
class HealthCheckRequest;
struct HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
struct HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class ResponseMetadata;
struct ResponseMetadataDefaultTypeInternal;
extern ResponseMetadataDefaultTypeInternal _ResponseMetadata_default_instance_;
class ServiceResponseWrapper;
struct ServiceResponseWrapperDefaultTypeInternal;
extern ServiceResponseWrapperDefaultTypeInternal _ServiceResponseWrapper_default_instance_;
class SubscriptionMessage;
struct SubscriptionMessageDefaultTypeInternal;
extern SubscriptionMessageDefaultTypeInternal _SubscriptionMessage_default_instance_;
class UpdateSubscriptionRequest;
struct UpdateSubscriptionRequestDefaultTypeInternal;
extern UpdateSubscriptionRequestDefaultTypeInternal _UpdateSubscriptionRequest_default_instance_;
class UpdateSubscriptionResponse;
struct UpdateSubscriptionResponseDefaultTypeInternal;
extern UpdateSubscriptionResponseDefaultTypeInternal _UpdateSubscriptionResponse_default_instance_;
}  // namespace subscription_pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace subscription_pb {
enum HealthCheckStatus : int {
  UNHEALTHY = 0,
  DEGRADED = 1,
  HEALTHY = 2,
  HealthCheckStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HealthCheckStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HealthCheckStatus_IsValid(int value);
extern const uint32_t HealthCheckStatus_internal_data_[];
constexpr HealthCheckStatus HealthCheckStatus_MIN = static_cast<HealthCheckStatus>(0);
constexpr HealthCheckStatus HealthCheckStatus_MAX = static_cast<HealthCheckStatus>(2);
constexpr int HealthCheckStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
HealthCheckStatus_descriptor();
template <typename T>
const std::string& HealthCheckStatus_Name(T value) {
  static_assert(std::is_same<T, HealthCheckStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HealthCheckStatus_Name().");
  return HealthCheckStatus_Name(static_cast<HealthCheckStatus>(value));
}
template <>
inline const std::string& HealthCheckStatus_Name(HealthCheckStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HealthCheckStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool HealthCheckStatus_Parse(absl::string_view name, HealthCheckStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthCheckStatus>(
      HealthCheckStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class HealthCheckResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.HealthCheckResponse) */ {
 public:
  inline HealthCheckResponse() : HealthCheckResponse(nullptr) {}
  ~HealthCheckResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckResponse(::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckResponse(const HealthCheckResponse& from)
      : HealthCheckResponse(nullptr, from) {}
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HealthCheckResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HealthCheckResponse& from) {
    HealthCheckResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HealthCheckResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.HealthCheckResponse";
  }
  protected:
  explicit HealthCheckResponse(::google::protobuf::Arena* arena);
  HealthCheckResponse(::google::protobuf::Arena* arena, const HealthCheckResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .subscription_pb.HealthCheckStatus status = 1 [json_name = "status"];
  void clear_status() ;
  ::subscription_pb::HealthCheckStatus status() const;
  void set_status(::subscription_pb::HealthCheckStatus value);

  private:
  ::subscription_pb::HealthCheckStatus _internal_status() const;
  void _internal_set_status(::subscription_pb::HealthCheckStatus value);

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.HealthCheckResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class HealthCheckRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:subscription_pb.HealthCheckRequest) */ {
 public:
  inline HealthCheckRequest() : HealthCheckRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HealthCheckRequest(::google::protobuf::internal::ConstantInitialized);

  inline HealthCheckRequest(const HealthCheckRequest& from)
      : HealthCheckRequest(nullptr, from) {}
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthCheckRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HealthCheckRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HealthCheckRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HealthCheckRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HealthCheckRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.HealthCheckRequest";
  }
  protected:
  explicit HealthCheckRequest(::google::protobuf::Arena* arena);
  HealthCheckRequest(::google::protobuf::Arena* arena, const HealthCheckRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:subscription_pb.HealthCheckRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class GetSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.GetSubscriptionRequest) */ {
 public:
  inline GetSubscriptionRequest() : GetSubscriptionRequest(nullptr) {}
  ~GetSubscriptionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSubscriptionRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetSubscriptionRequest(const GetSubscriptionRequest& from)
      : GetSubscriptionRequest(nullptr, from) {}
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetSubscriptionRequest& from) {
    GetSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetSubscriptionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.GetSubscriptionRequest";
  }
  protected:
  explicit GetSubscriptionRequest(::google::protobuf::Arena* arena);
  GetSubscriptionRequest(::google::protobuf::Arena* arena, const GetSubscriptionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.GetSubscriptionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class DeleteSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.DeleteSubscriptionRequest) */ {
 public:
  inline DeleteSubscriptionRequest() : DeleteSubscriptionRequest(nullptr) {}
  ~DeleteSubscriptionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteSubscriptionRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
      : DeleteSubscriptionRequest(nullptr, from) {}
  DeleteSubscriptionRequest(DeleteSubscriptionRequest&& from) noexcept
    : DeleteSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionRequest& operator=(const DeleteSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubscriptionRequest& operator=(DeleteSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionRequest*>(
               &_DeleteSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteSubscriptionRequest& a, DeleteSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteSubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteSubscriptionRequest& from) {
    DeleteSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteSubscriptionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.DeleteSubscriptionRequest";
  }
  protected:
  explicit DeleteSubscriptionRequest(::google::protobuf::Arena* arena);
  DeleteSubscriptionRequest(::google::protobuf::Arena* arena, const DeleteSubscriptionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.DeleteSubscriptionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class UpdateSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.UpdateSubscriptionRequest) */ {
 public:
  inline UpdateSubscriptionRequest() : UpdateSubscriptionRequest(nullptr) {}
  ~UpdateSubscriptionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSubscriptionRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from)
      : UpdateSubscriptionRequest(nullptr, from) {}
  UpdateSubscriptionRequest(UpdateSubscriptionRequest&& from) noexcept
    : UpdateSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriptionRequest& operator=(const UpdateSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSubscriptionRequest& operator=(UpdateSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriptionRequest*>(
               &_UpdateSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateSubscriptionRequest& a, UpdateSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateSubscriptionRequest& from) {
    UpdateSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateSubscriptionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.UpdateSubscriptionRequest";
  }
  protected:
  explicit UpdateSubscriptionRequest(::google::protobuf::Arena* arena);
  UpdateSubscriptionRequest(::google::protobuf::Arena* arena, const UpdateSubscriptionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSubscribedUntilFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .google.protobuf.Timestamp subscribed_until = 2 [json_name = "subscribedUntil"];
  bool has_subscribed_until() const;
  void clear_subscribed_until() ;
  const ::google::protobuf::Timestamp& subscribed_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_subscribed_until();
  ::google::protobuf::Timestamp* mutable_subscribed_until();
  void set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_subscribed_until();

  private:
  const ::google::protobuf::Timestamp& _internal_subscribed_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_subscribed_until();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.UpdateSubscriptionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::Timestamp* subscribed_until_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class SubscriptionMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.SubscriptionMessage) */ {
 public:
  inline SubscriptionMessage() : SubscriptionMessage(nullptr) {}
  ~SubscriptionMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionMessage(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionMessage(const SubscriptionMessage& from)
      : SubscriptionMessage(nullptr, from) {}
  SubscriptionMessage(SubscriptionMessage&& from) noexcept
    : SubscriptionMessage() {
    *this = ::std::move(from);
  }

  inline SubscriptionMessage& operator=(const SubscriptionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionMessage& operator=(SubscriptionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionMessage* internal_default_instance() {
    return reinterpret_cast<const SubscriptionMessage*>(
               &_SubscriptionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscriptionMessage& a, SubscriptionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionMessage& from) {
    SubscriptionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.SubscriptionMessage";
  }
  protected:
  explicit SubscriptionMessage(::google::protobuf::Arena* arena);
  SubscriptionMessage(::google::protobuf::Arena* arena, const SubscriptionMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kSubscribedUntilFieldNumber = 3,
  };
  // string subscription_id = 1 [json_name = "subscriptionId"];
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .google.protobuf.Timestamp subscribed_until = 3 [json_name = "subscribedUntil"];
  bool has_subscribed_until() const;
  void clear_subscribed_until() ;
  const ::google::protobuf::Timestamp& subscribed_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_subscribed_until();
  ::google::protobuf::Timestamp* mutable_subscribed_until();
  void set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_subscribed_until();

  private:
  const ::google::protobuf::Timestamp& _internal_subscribed_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_subscribed_until();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.SubscriptionMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::Timestamp* subscribed_until_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class ResponseMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.ResponseMetadata) */ {
 public:
  inline ResponseMetadata() : ResponseMetadata(nullptr) {}
  ~ResponseMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseMetadata(::google::protobuf::internal::ConstantInitialized);

  inline ResponseMetadata(const ResponseMetadata& from)
      : ResponseMetadata(nullptr, from) {}
  ResponseMetadata(ResponseMetadata&& from) noexcept
    : ResponseMetadata() {
    *this = ::std::move(from);
  }

  inline ResponseMetadata& operator=(const ResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMetadata& operator=(ResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const ResponseMetadata*>(
               &_ResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseMetadata& a, ResponseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseMetadata& from) {
    ResponseMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.ResponseMetadata";
  }
  protected:
  explicit ResponseMetadata(::google::protobuf::Arena* arena);
  ResponseMetadata(::google::protobuf::Arena* arena, const ResponseMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // string request_id = 1 [json_name = "requestId"];
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // .google.protobuf.Timestamp timestamp = 2 [json_name = "timestamp"];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.ResponseMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    ::google::protobuf::Timestamp* timestamp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class CreateOrUpdateSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.CreateOrUpdateSubscriptionRequest) */ {
 public:
  inline CreateOrUpdateSubscriptionRequest() : CreateOrUpdateSubscriptionRequest(nullptr) {}
  ~CreateOrUpdateSubscriptionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateOrUpdateSubscriptionRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreateOrUpdateSubscriptionRequest(const CreateOrUpdateSubscriptionRequest& from)
      : CreateOrUpdateSubscriptionRequest(nullptr, from) {}
  CreateOrUpdateSubscriptionRequest(CreateOrUpdateSubscriptionRequest&& from) noexcept
    : CreateOrUpdateSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline CreateOrUpdateSubscriptionRequest& operator=(const CreateOrUpdateSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrUpdateSubscriptionRequest& operator=(CreateOrUpdateSubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrUpdateSubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrUpdateSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateOrUpdateSubscriptionRequest*>(
               &_CreateOrUpdateSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateOrUpdateSubscriptionRequest& a, CreateOrUpdateSubscriptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrUpdateSubscriptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrUpdateSubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateOrUpdateSubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateOrUpdateSubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateOrUpdateSubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateOrUpdateSubscriptionRequest& from) {
    CreateOrUpdateSubscriptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateOrUpdateSubscriptionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.CreateOrUpdateSubscriptionRequest";
  }
  protected:
  explicit CreateOrUpdateSubscriptionRequest(::google::protobuf::Arena* arena);
  CreateOrUpdateSubscriptionRequest(::google::protobuf::Arena* arena, const CreateOrUpdateSubscriptionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSubscribedUntilFieldNumber = 2,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .google.protobuf.Timestamp subscribed_until = 2 [json_name = "subscribedUntil"];
  bool has_subscribed_until() const;
  void clear_subscribed_until() ;
  const ::google::protobuf::Timestamp& subscribed_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_subscribed_until();
  ::google::protobuf::Timestamp* mutable_subscribed_until();
  void set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_subscribed_until();

  private:
  const ::google::protobuf::Timestamp& _internal_subscribed_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_subscribed_until();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.CreateOrUpdateSubscriptionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::Timestamp* subscribed_until_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class UpdateSubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.UpdateSubscriptionResponse) */ {
 public:
  inline UpdateSubscriptionResponse() : UpdateSubscriptionResponse(nullptr) {}
  ~UpdateSubscriptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateSubscriptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateSubscriptionResponse(const UpdateSubscriptionResponse& from)
      : UpdateSubscriptionResponse(nullptr, from) {}
  UpdateSubscriptionResponse(UpdateSubscriptionResponse&& from) noexcept
    : UpdateSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriptionResponse& operator=(const UpdateSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSubscriptionResponse& operator=(UpdateSubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriptionResponse*>(
               &_UpdateSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateSubscriptionResponse& a, UpdateSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSubscriptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSubscriptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSubscriptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateSubscriptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateSubscriptionResponse& from) {
    UpdateSubscriptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateSubscriptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.UpdateSubscriptionResponse";
  }
  protected:
  explicit UpdateSubscriptionResponse(::google::protobuf::Arena* arena);
  UpdateSubscriptionResponse(::google::protobuf::Arena* arena, const UpdateSubscriptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::subscription_pb::ResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::subscription_pb::ResponseMetadata* release_metadata();
  ::subscription_pb::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  ::subscription_pb::ResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::subscription_pb::ResponseMetadata& _internal_metadata() const;
  ::subscription_pb::ResponseMetadata* _internal_mutable_metadata();

  public:
  // .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
  bool has_details() const;
  void clear_details() ;
  const ::subscription_pb::SubscriptionMessage& details() const;
  PROTOBUF_NODISCARD ::subscription_pb::SubscriptionMessage* release_details();
  ::subscription_pb::SubscriptionMessage* mutable_details();
  void set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  void unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  ::subscription_pb::SubscriptionMessage* unsafe_arena_release_details();

  private:
  const ::subscription_pb::SubscriptionMessage& _internal_details() const;
  ::subscription_pb::SubscriptionMessage* _internal_mutable_details();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.UpdateSubscriptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::subscription_pb::ResponseMetadata* metadata_;
    ::subscription_pb::SubscriptionMessage* details_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class ServiceResponseWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.ServiceResponseWrapper) */ {
 public:
  inline ServiceResponseWrapper() : ServiceResponseWrapper(nullptr) {}
  ~ServiceResponseWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceResponseWrapper(::google::protobuf::internal::ConstantInitialized);

  inline ServiceResponseWrapper(const ServiceResponseWrapper& from)
      : ServiceResponseWrapper(nullptr, from) {}
  ServiceResponseWrapper(ServiceResponseWrapper&& from) noexcept
    : ServiceResponseWrapper() {
    *this = ::std::move(from);
  }

  inline ServiceResponseWrapper& operator=(const ServiceResponseWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceResponseWrapper& operator=(ServiceResponseWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceResponseWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceResponseWrapper* internal_default_instance() {
    return reinterpret_cast<const ServiceResponseWrapper*>(
               &_ServiceResponseWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceResponseWrapper& a, ServiceResponseWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceResponseWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceResponseWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceResponseWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceResponseWrapper>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServiceResponseWrapper& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServiceResponseWrapper& from) {
    ServiceResponseWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServiceResponseWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.ServiceResponseWrapper";
  }
  protected:
  explicit ServiceResponseWrapper(::google::protobuf::Arena* arena);
  ServiceResponseWrapper(::google::protobuf::Arena* arena, const ServiceResponseWrapper& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::subscription_pb::ResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::subscription_pb::ResponseMetadata* release_metadata();
  ::subscription_pb::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  ::subscription_pb::ResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::subscription_pb::ResponseMetadata& _internal_metadata() const;
  ::subscription_pb::ResponseMetadata* _internal_mutable_metadata();

  public:
  // .google.protobuf.Any payload = 2 [json_name = "payload"];
  bool has_payload() const;
  void clear_payload() ;
  const ::google::protobuf::Any& payload() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_payload();
  ::google::protobuf::Any* mutable_payload();
  void set_allocated_payload(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_payload(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_payload();

  private:
  const ::google::protobuf::Any& _internal_payload() const;
  ::google::protobuf::Any* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.ServiceResponseWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::subscription_pb::ResponseMetadata* metadata_;
    ::google::protobuf::Any* payload_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class GetSubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.GetSubscriptionResponse) */ {
 public:
  inline GetSubscriptionResponse() : GetSubscriptionResponse(nullptr) {}
  ~GetSubscriptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSubscriptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetSubscriptionResponse(const GetSubscriptionResponse& from)
      : GetSubscriptionResponse(nullptr, from) {}
  GetSubscriptionResponse(GetSubscriptionResponse&& from) noexcept
    : GetSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionResponse& operator=(const GetSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSubscriptionResponse& operator=(GetSubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionResponse*>(
               &_GetSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetSubscriptionResponse& a, GetSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSubscriptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSubscriptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSubscriptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSubscriptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetSubscriptionResponse& from) {
    GetSubscriptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetSubscriptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.GetSubscriptionResponse";
  }
  protected:
  explicit GetSubscriptionResponse(::google::protobuf::Arena* arena);
  GetSubscriptionResponse(::google::protobuf::Arena* arena, const GetSubscriptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::subscription_pb::ResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::subscription_pb::ResponseMetadata* release_metadata();
  ::subscription_pb::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  ::subscription_pb::ResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::subscription_pb::ResponseMetadata& _internal_metadata() const;
  ::subscription_pb::ResponseMetadata* _internal_mutable_metadata();

  public:
  // .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
  bool has_details() const;
  void clear_details() ;
  const ::subscription_pb::SubscriptionMessage& details() const;
  PROTOBUF_NODISCARD ::subscription_pb::SubscriptionMessage* release_details();
  ::subscription_pb::SubscriptionMessage* mutable_details();
  void set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  void unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  ::subscription_pb::SubscriptionMessage* unsafe_arena_release_details();

  private:
  const ::subscription_pb::SubscriptionMessage& _internal_details() const;
  ::subscription_pb::SubscriptionMessage* _internal_mutable_details();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.GetSubscriptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::subscription_pb::ResponseMetadata* metadata_;
    ::subscription_pb::SubscriptionMessage* details_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class DeleteSubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.DeleteSubscriptionResponse) */ {
 public:
  inline DeleteSubscriptionResponse() : DeleteSubscriptionResponse(nullptr) {}
  ~DeleteSubscriptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteSubscriptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeleteSubscriptionResponse(const DeleteSubscriptionResponse& from)
      : DeleteSubscriptionResponse(nullptr, from) {}
  DeleteSubscriptionResponse(DeleteSubscriptionResponse&& from) noexcept
    : DeleteSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionResponse& operator=(const DeleteSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSubscriptionResponse& operator=(DeleteSubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionResponse*>(
               &_DeleteSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteSubscriptionResponse& a, DeleteSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSubscriptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSubscriptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSubscriptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteSubscriptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteSubscriptionResponse& from) {
    DeleteSubscriptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteSubscriptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.DeleteSubscriptionResponse";
  }
  protected:
  explicit DeleteSubscriptionResponse(::google::protobuf::Arena* arena);
  DeleteSubscriptionResponse(::google::protobuf::Arena* arena, const DeleteSubscriptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kMetadataFieldNumber = 1,
  };
  // string subscription_id = 2 [json_name = "subscriptionId"];
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // string user_id = 3 [json_name = "userId"];
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::subscription_pb::ResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::subscription_pb::ResponseMetadata* release_metadata();
  ::subscription_pb::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  ::subscription_pb::ResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::subscription_pb::ResponseMetadata& _internal_metadata() const;
  ::subscription_pb::ResponseMetadata* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.DeleteSubscriptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      73, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::subscription_pb::ResponseMetadata* metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};// -------------------------------------------------------------------

class CreateOrUpdateSubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:subscription_pb.CreateOrUpdateSubscriptionResponse) */ {
 public:
  inline CreateOrUpdateSubscriptionResponse() : CreateOrUpdateSubscriptionResponse(nullptr) {}
  ~CreateOrUpdateSubscriptionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateOrUpdateSubscriptionResponse(::google::protobuf::internal::ConstantInitialized);

  inline CreateOrUpdateSubscriptionResponse(const CreateOrUpdateSubscriptionResponse& from)
      : CreateOrUpdateSubscriptionResponse(nullptr, from) {}
  CreateOrUpdateSubscriptionResponse(CreateOrUpdateSubscriptionResponse&& from) noexcept
    : CreateOrUpdateSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline CreateOrUpdateSubscriptionResponse& operator=(const CreateOrUpdateSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOrUpdateSubscriptionResponse& operator=(CreateOrUpdateSubscriptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOrUpdateSubscriptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOrUpdateSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateOrUpdateSubscriptionResponse*>(
               &_CreateOrUpdateSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateOrUpdateSubscriptionResponse& a, CreateOrUpdateSubscriptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOrUpdateSubscriptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOrUpdateSubscriptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateOrUpdateSubscriptionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateOrUpdateSubscriptionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateOrUpdateSubscriptionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateOrUpdateSubscriptionResponse& from) {
    CreateOrUpdateSubscriptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateOrUpdateSubscriptionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "subscription_pb.CreateOrUpdateSubscriptionResponse";
  }
  protected:
  explicit CreateOrUpdateSubscriptionResponse(::google::protobuf::Arena* arena);
  CreateOrUpdateSubscriptionResponse(::google::protobuf::Arena* arena, const CreateOrUpdateSubscriptionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::subscription_pb::ResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::subscription_pb::ResponseMetadata* release_metadata();
  ::subscription_pb::ResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value);
  ::subscription_pb::ResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::subscription_pb::ResponseMetadata& _internal_metadata() const;
  ::subscription_pb::ResponseMetadata* _internal_mutable_metadata();

  public:
  // .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
  bool has_details() const;
  void clear_details() ;
  const ::subscription_pb::SubscriptionMessage& details() const;
  PROTOBUF_NODISCARD ::subscription_pb::SubscriptionMessage* release_details();
  ::subscription_pb::SubscriptionMessage* mutable_details();
  void set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  void unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value);
  ::subscription_pb::SubscriptionMessage* unsafe_arena_release_details();

  private:
  const ::subscription_pb::SubscriptionMessage& _internal_details() const;
  ::subscription_pb::SubscriptionMessage* _internal_mutable_details();

  public:
  // @@protoc_insertion_point(class_scope:subscription_pb.CreateOrUpdateSubscriptionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::subscription_pb::ResponseMetadata* metadata_;
    ::subscription_pb::SubscriptionMessage* details_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_subscriptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ResponseMetadata

// string request_id = 1 [json_name = "requestId"];
inline void ResponseMetadata::clear_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& ResponseMetadata::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.ResponseMetadata.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseMetadata::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.ResponseMetadata.request_id)
}
inline std::string* ResponseMetadata::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.ResponseMetadata.request_id)
  return _s;
}
inline const std::string& ResponseMetadata::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_.Get();
}
inline void ResponseMetadata::_internal_set_request_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* ResponseMetadata::_internal_mutable_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* ResponseMetadata::release_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.ResponseMetadata.request_id)
  return _impl_.request_id_.Release();
}
inline void ResponseMetadata::set_allocated_request_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.ResponseMetadata.request_id)
}

// .google.protobuf.Timestamp timestamp = 2 [json_name = "timestamp"];
inline bool ResponseMetadata::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ResponseMetadata::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ResponseMetadata::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.ResponseMetadata.timestamp)
  return _internal_timestamp();
}
inline void ResponseMetadata::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.ResponseMetadata.timestamp)
}
inline ::google::protobuf::Timestamp* ResponseMetadata::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ResponseMetadata::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.ResponseMetadata.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ResponseMetadata::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* ResponseMetadata::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:subscription_pb.ResponseMetadata.timestamp)
  return _msg;
}
inline void ResponseMetadata::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.ResponseMetadata.timestamp)
}

// -------------------------------------------------------------------

// ServiceResponseWrapper

// .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool ServiceResponseWrapper::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void ServiceResponseWrapper::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::subscription_pb::ResponseMetadata& ServiceResponseWrapper::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::ResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::ResponseMetadata&>(::subscription_pb::_ResponseMetadata_default_instance_);
}
inline const ::subscription_pb::ResponseMetadata& ServiceResponseWrapper::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.ServiceResponseWrapper.metadata)
  return _internal_metadata();
}
inline void ServiceResponseWrapper::unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.ServiceResponseWrapper.metadata)
}
inline ::subscription_pb::ResponseMetadata* ServiceResponseWrapper::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::ResponseMetadata* ServiceResponseWrapper::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.ServiceResponseWrapper.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::subscription_pb::ResponseMetadata* ServiceResponseWrapper::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::ResponseMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::subscription_pb::ResponseMetadata* ServiceResponseWrapper::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::ResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:subscription_pb.ServiceResponseWrapper.metadata)
  return _msg;
}
inline void ServiceResponseWrapper::set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::ResponseMetadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.ServiceResponseWrapper.metadata)
}

// .google.protobuf.Any payload = 2 [json_name = "payload"];
inline bool ServiceResponseWrapper::has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.payload_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& ServiceResponseWrapper::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& ServiceResponseWrapper::payload() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.ServiceResponseWrapper.payload)
  return _internal_payload();
}
inline void ServiceResponseWrapper::unsafe_arena_set_allocated_payload(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.ServiceResponseWrapper.payload)
}
inline ::google::protobuf::Any* ServiceResponseWrapper::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* released = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* ServiceResponseWrapper::unsafe_arena_release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.ServiceResponseWrapper.payload)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* ServiceResponseWrapper::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArena());
    _impl_.payload_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.payload_;
}
inline ::google::protobuf::Any* ServiceResponseWrapper::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:subscription_pb.ServiceResponseWrapper.payload)
  return _msg;
}
inline void ServiceResponseWrapper::set_allocated_payload(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.payload_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.payload_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.ServiceResponseWrapper.payload)
}

// -------------------------------------------------------------------

// SubscriptionMessage

// string subscription_id = 1 [json_name = "subscriptionId"];
inline void SubscriptionMessage::clear_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& SubscriptionMessage::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.SubscriptionMessage.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionMessage::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.SubscriptionMessage.subscription_id)
}
inline std::string* SubscriptionMessage::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.SubscriptionMessage.subscription_id)
  return _s;
}
inline const std::string& SubscriptionMessage::_internal_subscription_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscription_id_.Get();
}
inline void SubscriptionMessage::_internal_set_subscription_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* SubscriptionMessage::_internal_mutable_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* SubscriptionMessage::release_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.SubscriptionMessage.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void SubscriptionMessage::set_allocated_subscription_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subscription_id_.IsDefault()) {
          _impl_.subscription_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.SubscriptionMessage.subscription_id)
}

// string user_id = 2 [json_name = "userId"];
inline void SubscriptionMessage::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& SubscriptionMessage::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.SubscriptionMessage.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionMessage::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.SubscriptionMessage.user_id)
}
inline std::string* SubscriptionMessage::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.SubscriptionMessage.user_id)
  return _s;
}
inline const std::string& SubscriptionMessage::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void SubscriptionMessage::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* SubscriptionMessage::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* SubscriptionMessage::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.SubscriptionMessage.user_id)
  return _impl_.user_id_.Release();
}
inline void SubscriptionMessage::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.SubscriptionMessage.user_id)
}

// .google.protobuf.Timestamp subscribed_until = 3 [json_name = "subscribedUntil"];
inline bool SubscriptionMessage::has_subscribed_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribed_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SubscriptionMessage::_internal_subscribed_until() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.subscribed_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SubscriptionMessage::subscribed_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.SubscriptionMessage.subscribed_until)
  return _internal_subscribed_until();
}
inline void SubscriptionMessage::unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }
  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.SubscriptionMessage.subscribed_until)
}
inline ::google::protobuf::Timestamp* SubscriptionMessage::release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* SubscriptionMessage::unsafe_arena_release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.SubscriptionMessage.subscribed_until)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SubscriptionMessage::_internal_mutable_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscribed_until_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.subscribed_until_;
}
inline ::google::protobuf::Timestamp* SubscriptionMessage::mutable_subscribed_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_subscribed_until();
  // @@protoc_insertion_point(field_mutable:subscription_pb.SubscriptionMessage.subscribed_until)
  return _msg;
}
inline void SubscriptionMessage::set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.SubscriptionMessage.subscribed_until)
}

// -------------------------------------------------------------------

// CreateOrUpdateSubscriptionRequest

// string user_id = 1 [json_name = "userId"];
inline void CreateOrUpdateSubscriptionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateOrUpdateSubscriptionRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.CreateOrUpdateSubscriptionRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateOrUpdateSubscriptionRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.CreateOrUpdateSubscriptionRequest.user_id)
}
inline std::string* CreateOrUpdateSubscriptionRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.CreateOrUpdateSubscriptionRequest.user_id)
  return _s;
}
inline const std::string& CreateOrUpdateSubscriptionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void CreateOrUpdateSubscriptionRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* CreateOrUpdateSubscriptionRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* CreateOrUpdateSubscriptionRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.CreateOrUpdateSubscriptionRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateOrUpdateSubscriptionRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.CreateOrUpdateSubscriptionRequest.user_id)
}

// .google.protobuf.Timestamp subscribed_until = 2 [json_name = "subscribedUntil"];
inline bool CreateOrUpdateSubscriptionRequest::has_subscribed_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribed_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CreateOrUpdateSubscriptionRequest::_internal_subscribed_until() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.subscribed_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CreateOrUpdateSubscriptionRequest::subscribed_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.CreateOrUpdateSubscriptionRequest.subscribed_until)
  return _internal_subscribed_until();
}
inline void CreateOrUpdateSubscriptionRequest::unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }
  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.CreateOrUpdateSubscriptionRequest.subscribed_until)
}
inline ::google::protobuf::Timestamp* CreateOrUpdateSubscriptionRequest::release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CreateOrUpdateSubscriptionRequest::unsafe_arena_release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.CreateOrUpdateSubscriptionRequest.subscribed_until)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CreateOrUpdateSubscriptionRequest::_internal_mutable_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscribed_until_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.subscribed_until_;
}
inline ::google::protobuf::Timestamp* CreateOrUpdateSubscriptionRequest::mutable_subscribed_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_subscribed_until();
  // @@protoc_insertion_point(field_mutable:subscription_pb.CreateOrUpdateSubscriptionRequest.subscribed_until)
  return _msg;
}
inline void CreateOrUpdateSubscriptionRequest::set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.CreateOrUpdateSubscriptionRequest.subscribed_until)
}

// -------------------------------------------------------------------

// CreateOrUpdateSubscriptionResponse

// .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool CreateOrUpdateSubscriptionResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void CreateOrUpdateSubscriptionResponse::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::subscription_pb::ResponseMetadata& CreateOrUpdateSubscriptionResponse::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::ResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::ResponseMetadata&>(::subscription_pb::_ResponseMetadata_default_instance_);
}
inline const ::subscription_pb::ResponseMetadata& CreateOrUpdateSubscriptionResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.CreateOrUpdateSubscriptionResponse.metadata)
  return _internal_metadata();
}
inline void CreateOrUpdateSubscriptionResponse::unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.CreateOrUpdateSubscriptionResponse.metadata)
}
inline ::subscription_pb::ResponseMetadata* CreateOrUpdateSubscriptionResponse::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::ResponseMetadata* CreateOrUpdateSubscriptionResponse::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.CreateOrUpdateSubscriptionResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::subscription_pb::ResponseMetadata* CreateOrUpdateSubscriptionResponse::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::ResponseMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::subscription_pb::ResponseMetadata* CreateOrUpdateSubscriptionResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::ResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:subscription_pb.CreateOrUpdateSubscriptionResponse.metadata)
  return _msg;
}
inline void CreateOrUpdateSubscriptionResponse::set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::ResponseMetadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.CreateOrUpdateSubscriptionResponse.metadata)
}

// .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
inline bool CreateOrUpdateSubscriptionResponse::has_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.details_ != nullptr);
  return value;
}
inline void CreateOrUpdateSubscriptionResponse::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.details_ != nullptr) _impl_.details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::subscription_pb::SubscriptionMessage& CreateOrUpdateSubscriptionResponse::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::SubscriptionMessage* p = _impl_.details_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::SubscriptionMessage&>(::subscription_pb::_SubscriptionMessage_default_instance_);
}
inline const ::subscription_pb::SubscriptionMessage& CreateOrUpdateSubscriptionResponse::details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.CreateOrUpdateSubscriptionResponse.details)
  return _internal_details();
}
inline void CreateOrUpdateSubscriptionResponse::unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.details_);
  }
  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.CreateOrUpdateSubscriptionResponse.details)
}
inline ::subscription_pb::SubscriptionMessage* CreateOrUpdateSubscriptionResponse::release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* released = _impl_.details_;
  _impl_.details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::SubscriptionMessage* CreateOrUpdateSubscriptionResponse::unsafe_arena_release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.CreateOrUpdateSubscriptionResponse.details)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* temp = _impl_.details_;
  _impl_.details_ = nullptr;
  return temp;
}
inline ::subscription_pb::SubscriptionMessage* CreateOrUpdateSubscriptionResponse::_internal_mutable_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.details_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::SubscriptionMessage>(GetArena());
    _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(p);
  }
  return _impl_.details_;
}
inline ::subscription_pb::SubscriptionMessage* CreateOrUpdateSubscriptionResponse::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::SubscriptionMessage* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:subscription_pb.CreateOrUpdateSubscriptionResponse.details)
  return _msg;
}
inline void CreateOrUpdateSubscriptionResponse::set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::SubscriptionMessage*>(_impl_.details_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.CreateOrUpdateSubscriptionResponse.details)
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string user_id = 1 [json_name = "userId"];
inline void GetSubscriptionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetSubscriptionRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.GetSubscriptionRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSubscriptionRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.GetSubscriptionRequest.user_id)
}
inline std::string* GetSubscriptionRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.GetSubscriptionRequest.user_id)
  return _s;
}
inline const std::string& GetSubscriptionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void GetSubscriptionRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* GetSubscriptionRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* GetSubscriptionRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.GetSubscriptionRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetSubscriptionRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.GetSubscriptionRequest.user_id)
}

// -------------------------------------------------------------------

// GetSubscriptionResponse

// .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool GetSubscriptionResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void GetSubscriptionResponse::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::subscription_pb::ResponseMetadata& GetSubscriptionResponse::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::ResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::ResponseMetadata&>(::subscription_pb::_ResponseMetadata_default_instance_);
}
inline const ::subscription_pb::ResponseMetadata& GetSubscriptionResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.GetSubscriptionResponse.metadata)
  return _internal_metadata();
}
inline void GetSubscriptionResponse::unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.GetSubscriptionResponse.metadata)
}
inline ::subscription_pb::ResponseMetadata* GetSubscriptionResponse::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::ResponseMetadata* GetSubscriptionResponse::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.GetSubscriptionResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::subscription_pb::ResponseMetadata* GetSubscriptionResponse::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::ResponseMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::subscription_pb::ResponseMetadata* GetSubscriptionResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::ResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:subscription_pb.GetSubscriptionResponse.metadata)
  return _msg;
}
inline void GetSubscriptionResponse::set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::ResponseMetadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.GetSubscriptionResponse.metadata)
}

// .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
inline bool GetSubscriptionResponse::has_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.details_ != nullptr);
  return value;
}
inline void GetSubscriptionResponse::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.details_ != nullptr) _impl_.details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::subscription_pb::SubscriptionMessage& GetSubscriptionResponse::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::SubscriptionMessage* p = _impl_.details_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::SubscriptionMessage&>(::subscription_pb::_SubscriptionMessage_default_instance_);
}
inline const ::subscription_pb::SubscriptionMessage& GetSubscriptionResponse::details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.GetSubscriptionResponse.details)
  return _internal_details();
}
inline void GetSubscriptionResponse::unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.details_);
  }
  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.GetSubscriptionResponse.details)
}
inline ::subscription_pb::SubscriptionMessage* GetSubscriptionResponse::release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* released = _impl_.details_;
  _impl_.details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::SubscriptionMessage* GetSubscriptionResponse::unsafe_arena_release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.GetSubscriptionResponse.details)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* temp = _impl_.details_;
  _impl_.details_ = nullptr;
  return temp;
}
inline ::subscription_pb::SubscriptionMessage* GetSubscriptionResponse::_internal_mutable_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.details_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::SubscriptionMessage>(GetArena());
    _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(p);
  }
  return _impl_.details_;
}
inline ::subscription_pb::SubscriptionMessage* GetSubscriptionResponse::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::SubscriptionMessage* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:subscription_pb.GetSubscriptionResponse.details)
  return _msg;
}
inline void GetSubscriptionResponse::set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::SubscriptionMessage*>(_impl_.details_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.GetSubscriptionResponse.details)
}

// -------------------------------------------------------------------

// UpdateSubscriptionRequest

// string user_id = 1 [json_name = "userId"];
inline void UpdateSubscriptionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UpdateSubscriptionRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.UpdateSubscriptionRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateSubscriptionRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.UpdateSubscriptionRequest.user_id)
}
inline std::string* UpdateSubscriptionRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.UpdateSubscriptionRequest.user_id)
  return _s;
}
inline const std::string& UpdateSubscriptionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void UpdateSubscriptionRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* UpdateSubscriptionRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* UpdateSubscriptionRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.UpdateSubscriptionRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UpdateSubscriptionRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.UpdateSubscriptionRequest.user_id)
}

// .google.protobuf.Timestamp subscribed_until = 2 [json_name = "subscribedUntil"];
inline bool UpdateSubscriptionRequest::has_subscribed_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribed_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UpdateSubscriptionRequest::_internal_subscribed_until() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.subscribed_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UpdateSubscriptionRequest::subscribed_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.UpdateSubscriptionRequest.subscribed_until)
  return _internal_subscribed_until();
}
inline void UpdateSubscriptionRequest::unsafe_arena_set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }
  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.UpdateSubscriptionRequest.subscribed_until)
}
inline ::google::protobuf::Timestamp* UpdateSubscriptionRequest::release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* UpdateSubscriptionRequest::unsafe_arena_release_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.UpdateSubscriptionRequest.subscribed_until)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.subscribed_until_;
  _impl_.subscribed_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UpdateSubscriptionRequest::_internal_mutable_subscribed_until() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscribed_until_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.subscribed_until_;
}
inline ::google::protobuf::Timestamp* UpdateSubscriptionRequest::mutable_subscribed_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_subscribed_until();
  // @@protoc_insertion_point(field_mutable:subscription_pb.UpdateSubscriptionRequest.subscribed_until)
  return _msg;
}
inline void UpdateSubscriptionRequest::set_allocated_subscribed_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribed_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscribed_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.UpdateSubscriptionRequest.subscribed_until)
}

// -------------------------------------------------------------------

// UpdateSubscriptionResponse

// .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool UpdateSubscriptionResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void UpdateSubscriptionResponse::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::subscription_pb::ResponseMetadata& UpdateSubscriptionResponse::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::ResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::ResponseMetadata&>(::subscription_pb::_ResponseMetadata_default_instance_);
}
inline const ::subscription_pb::ResponseMetadata& UpdateSubscriptionResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.UpdateSubscriptionResponse.metadata)
  return _internal_metadata();
}
inline void UpdateSubscriptionResponse::unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.UpdateSubscriptionResponse.metadata)
}
inline ::subscription_pb::ResponseMetadata* UpdateSubscriptionResponse::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::ResponseMetadata* UpdateSubscriptionResponse::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.UpdateSubscriptionResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::subscription_pb::ResponseMetadata* UpdateSubscriptionResponse::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::ResponseMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::subscription_pb::ResponseMetadata* UpdateSubscriptionResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::ResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:subscription_pb.UpdateSubscriptionResponse.metadata)
  return _msg;
}
inline void UpdateSubscriptionResponse::set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::ResponseMetadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.UpdateSubscriptionResponse.metadata)
}

// .subscription_pb.SubscriptionMessage details = 2 [json_name = "details"];
inline bool UpdateSubscriptionResponse::has_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.details_ != nullptr);
  return value;
}
inline void UpdateSubscriptionResponse::clear_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.details_ != nullptr) _impl_.details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::subscription_pb::SubscriptionMessage& UpdateSubscriptionResponse::_internal_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::SubscriptionMessage* p = _impl_.details_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::SubscriptionMessage&>(::subscription_pb::_SubscriptionMessage_default_instance_);
}
inline const ::subscription_pb::SubscriptionMessage& UpdateSubscriptionResponse::details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.UpdateSubscriptionResponse.details)
  return _internal_details();
}
inline void UpdateSubscriptionResponse::unsafe_arena_set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.details_);
  }
  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.UpdateSubscriptionResponse.details)
}
inline ::subscription_pb::SubscriptionMessage* UpdateSubscriptionResponse::release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* released = _impl_.details_;
  _impl_.details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::SubscriptionMessage* UpdateSubscriptionResponse::unsafe_arena_release_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.UpdateSubscriptionResponse.details)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::subscription_pb::SubscriptionMessage* temp = _impl_.details_;
  _impl_.details_ = nullptr;
  return temp;
}
inline ::subscription_pb::SubscriptionMessage* UpdateSubscriptionResponse::_internal_mutable_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.details_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::SubscriptionMessage>(GetArena());
    _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(p);
  }
  return _impl_.details_;
}
inline ::subscription_pb::SubscriptionMessage* UpdateSubscriptionResponse::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::SubscriptionMessage* _msg = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:subscription_pb.UpdateSubscriptionResponse.details)
  return _msg;
}
inline void UpdateSubscriptionResponse::set_allocated_details(::subscription_pb::SubscriptionMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::SubscriptionMessage*>(_impl_.details_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.details_ = reinterpret_cast<::subscription_pb::SubscriptionMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.UpdateSubscriptionResponse.details)
}

// -------------------------------------------------------------------

// DeleteSubscriptionRequest

// string user_id = 1 [json_name = "userId"];
inline void DeleteSubscriptionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DeleteSubscriptionRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.DeleteSubscriptionRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSubscriptionRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.DeleteSubscriptionRequest.user_id)
}
inline std::string* DeleteSubscriptionRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.DeleteSubscriptionRequest.user_id)
  return _s;
}
inline const std::string& DeleteSubscriptionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void DeleteSubscriptionRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* DeleteSubscriptionRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* DeleteSubscriptionRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.DeleteSubscriptionRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void DeleteSubscriptionRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.DeleteSubscriptionRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteSubscriptionResponse

// .subscription_pb.ResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool DeleteSubscriptionResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline void DeleteSubscriptionResponse::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::subscription_pb::ResponseMetadata& DeleteSubscriptionResponse::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::subscription_pb::ResponseMetadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::subscription_pb::ResponseMetadata&>(::subscription_pb::_ResponseMetadata_default_instance_);
}
inline const ::subscription_pb::ResponseMetadata& DeleteSubscriptionResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.DeleteSubscriptionResponse.metadata)
  return _internal_metadata();
}
inline void DeleteSubscriptionResponse::unsafe_arena_set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:subscription_pb.DeleteSubscriptionResponse.metadata)
}
inline ::subscription_pb::ResponseMetadata* DeleteSubscriptionResponse::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::subscription_pb::ResponseMetadata* DeleteSubscriptionResponse::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.DeleteSubscriptionResponse.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::subscription_pb::ResponseMetadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::subscription_pb::ResponseMetadata* DeleteSubscriptionResponse::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::subscription_pb::ResponseMetadata>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(p);
  }
  return _impl_.metadata_;
}
inline ::subscription_pb::ResponseMetadata* DeleteSubscriptionResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::subscription_pb::ResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:subscription_pb.DeleteSubscriptionResponse.metadata)
  return _msg;
}
inline void DeleteSubscriptionResponse::set_allocated_metadata(::subscription_pb::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::subscription_pb::ResponseMetadata*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::subscription_pb::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.DeleteSubscriptionResponse.metadata)
}

// string subscription_id = 2 [json_name = "subscriptionId"];
inline void DeleteSubscriptionResponse::clear_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& DeleteSubscriptionResponse::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.DeleteSubscriptionResponse.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSubscriptionResponse::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.DeleteSubscriptionResponse.subscription_id)
}
inline std::string* DeleteSubscriptionResponse::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.DeleteSubscriptionResponse.subscription_id)
  return _s;
}
inline const std::string& DeleteSubscriptionResponse::_internal_subscription_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscription_id_.Get();
}
inline void DeleteSubscriptionResponse::_internal_set_subscription_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* DeleteSubscriptionResponse::_internal_mutable_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* DeleteSubscriptionResponse::release_subscription_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.DeleteSubscriptionResponse.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void DeleteSubscriptionResponse::set_allocated_subscription_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subscription_id_.IsDefault()) {
          _impl_.subscription_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.DeleteSubscriptionResponse.subscription_id)
}

// string user_id = 3 [json_name = "userId"];
inline void DeleteSubscriptionResponse::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& DeleteSubscriptionResponse::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:subscription_pb.DeleteSubscriptionResponse.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteSubscriptionResponse::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:subscription_pb.DeleteSubscriptionResponse.user_id)
}
inline std::string* DeleteSubscriptionResponse::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:subscription_pb.DeleteSubscriptionResponse.user_id)
  return _s;
}
inline const std::string& DeleteSubscriptionResponse::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void DeleteSubscriptionResponse::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* DeleteSubscriptionResponse::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* DeleteSubscriptionResponse::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:subscription_pb.DeleteSubscriptionResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void DeleteSubscriptionResponse::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:subscription_pb.DeleteSubscriptionResponse.user_id)
}

// -------------------------------------------------------------------

// HealthCheckRequest

// -------------------------------------------------------------------

// HealthCheckResponse

// .subscription_pb.HealthCheckStatus status = 1 [json_name = "status"];
inline void HealthCheckResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::subscription_pb::HealthCheckStatus HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:subscription_pb.HealthCheckResponse.status)
  return _internal_status();
}
inline void HealthCheckResponse::set_status(::subscription_pb::HealthCheckStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:subscription_pb.HealthCheckResponse.status)
}
inline ::subscription_pb::HealthCheckStatus HealthCheckResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::subscription_pb::HealthCheckStatus>(_impl_.status_);
}
inline void HealthCheckResponse::_internal_set_status(::subscription_pb::HealthCheckStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace subscription_pb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::subscription_pb::HealthCheckStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::subscription_pb::HealthCheckStatus>() {
  return ::subscription_pb::HealthCheckStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_subscriptions_2eproto_2epb_2eh
