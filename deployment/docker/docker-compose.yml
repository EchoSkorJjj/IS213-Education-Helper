version: "3.8"

secrets:
  kong_db_password:
    file: ./kong_db_password.txt

x-common-env:
  &common-env
  KONG_PG_HOST: kong-database
  KONG_PG_USER: kong
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_db_password

networks:
  default:

volumes:
  kong-data: {}
  user-storage-db-volume: {}
  notes-db-volume: {}
  contents-db-volume: {}

services:
  kong-gateway:
    image: kong:latest
    build: ../../backend/kong-gateway
    environment:
      <<: *common-env
      KONG_DATABASE: off
      KONG_PLUGINS: bundled,authn-kong
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml 
    ports:
      - "8000:8000" # Proxy
      # - "8001:8001" # Admin API
      - "8443:8443" # Proxy SSL
      - "8444:8444" # Admin API SSL # hide
    depends_on:
      user-storage-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - kong_db_password
    restart: on-failure
    volumes:
      - ../../backend/kong-gateway/kong.yml:/etc/kong/kong.yml 
      - ../../backend/kong-gateway/authn-kong:/usr/local/share/lua/5.1/kong/plugins/authn-kong 
      - ../../backend/kong-gateway/protos:/usr/local/share/lua/5.1/kong/protos

  user-storage-db:
    image: postgres
    volumes:
      - user-storage-db-volume:/var/lib/postgresql/data
      - ../sql_table/create_user_storage_table.sql:/docker-entrypoint-initdb.d/user_storage.sql
    environment:
      POSTGRES_DB: user_storage_db
      POSTGRES_USER: user_storage_user
      POSTGRES_PASSWORD: user_storage_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_storage_user -d user_storage_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-redis:
    image: redis:7.2-rc2-alpine3.18
    command: redis-server --requirepass password
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "password", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5   

  user-storage-service:
    build: ../../backend/simple/user-storage
    image: user-storage-service:1.0
    depends_on:
      user-storage-db:
        condition: service_healthy
      user-redis:
        condition: service_healthy
    ports:
      - "50051:50051"
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  notes-db:
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=my_notes_app
    ports:
      - "3306:3306"
    volumes:
      - notes-db-volume:/var/lib/mysql
      - ../sql_table/create_notes_table.sql:/docker-entrypoint-initdb.d/create_notes_table.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  
  contents-db:
    image: bitnami/cassandra:4.1.4
    volumes:
      - contents-db-volume:/bitnami
      - ../sql_table/create_contents_table.cql:/docker-entrypoint-initdb.d/create_contents_table.cql
    healthcheck:
      # TODO: Not secure. Username and password are exposed in the command.
      test: ["CMD", "cqlsh", "-u", "cassandra", "-p", "cassandra"]
      interval: 30s
      timeout: 10s
      retries: 3

  contents-redis:
    image: redis:7.2-rc2-alpine3.18
    command: redis-server --requirepass password
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "password", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  notes-service:
    build: ../../backend/simple/notes
    env_file:
      - ../../backend/simple/notes/.env
    depends_on:
      notes-db:
        condition: service_healthy
    ports:
      - "50052:50052"      

  view-notes-service:
    build: ../../backend/complex/view-notes
    image: view-notes-service:1.0
    volumes:
      - ../../backend/complex/view-notes/.env:/app/.env
    depends_on:
      notes-service:
        # TODO: Set up healthcheck for notes service
        condition: service_started
      contents-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    
  contents-service:
    build: ../../backend/simple/contents
    image: content-service:1.0
    volumes:
      - ../../backend/simple/contents/.env:/app/.env
    depends_on:
      contents-db:
        condition: service_healthy
      contents-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=:50051"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  frontend-client:
    build: ../../client
    image: client:1.0
    volumes:
      - ../../client/:/app/
    depends_on:
      kong-gateway:
        condition: service_healthy
    ports:
      - "3001:3001"

  upload-notes:
    build: ../../backend/complex/upload-notes
    image: upload-notes:1.0
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    ports:
      - "5672:5672" 
      - "15672:15672" # to hide later
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  pdf-reader:
    build:
      context: ../../backend/simple/fileprocessor
    # logging:
    #   driver: fluentd
    #   options:
    #     fluentd-address: localhost:24224
    #     tag: docker.container.pdf-reader
    ports:
      - "50053:50053"