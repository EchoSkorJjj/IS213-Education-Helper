// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: notes/notes.proto

package notes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NoteService_UploadNote_FullMethodName                    = "/notes.NoteService/UploadNote"
	NoteService_RetrieveNote_FullMethodName                  = "/notes.NoteService/RetrieveNote"
	NoteService_RetrieveMultipleNotes_FullMethodName         = "/notes.NoteService/RetrieveMultipleNotes"
	NoteService_RetrieveMultipleNotesByUserId_FullMethodName = "/notes.NoteService/RetrieveMultipleNotesByUserId"
	NoteService_RetrieveNoteMetadata_FullMethodName          = "/notes.NoteService/RetrieveNoteMetadata"
	NoteService_UpdateNote_FullMethodName                    = "/notes.NoteService/UpdateNote"
)

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteServiceClient interface {
	// Define an RPC method to upload a note
	UploadNote(ctx context.Context, in *UploadNoteRequest, opts ...grpc.CallOption) (*UploadNoteResponse, error)
	// Define an RPC method to retrieve a note
	RetrieveNote(ctx context.Context, in *RetrieveNoteRequest, opts ...grpc.CallOption) (*RetrieveNoteResponse, error)
	// Define an RPC method to retrieve multiple notes
	RetrieveMultipleNotes(ctx context.Context, in *RetrieveMultipleNotesRequest, opts ...grpc.CallOption) (*RetrieveMultipleNotesResponse, error)
	// Define an RPC method to retrieve multiple notes by user id
	RetrieveMultipleNotesByUserId(ctx context.Context, in *RetrieveMultipleNotesByUserIdRequest, opts ...grpc.CallOption) (*RetrieveMultipleNotesByUserIdResponse, error)
	RetrieveNoteMetadata(ctx context.Context, in *RetrieveNoteMetadataRequest, opts ...grpc.CallOption) (*RetrieveNoteMetadataResponse, error)
	// Define an RPC method to update notes by note id
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteResponse, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) UploadNote(ctx context.Context, in *UploadNoteRequest, opts ...grpc.CallOption) (*UploadNoteResponse, error) {
	out := new(UploadNoteResponse)
	err := c.cc.Invoke(ctx, NoteService_UploadNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) RetrieveNote(ctx context.Context, in *RetrieveNoteRequest, opts ...grpc.CallOption) (*RetrieveNoteResponse, error) {
	out := new(RetrieveNoteResponse)
	err := c.cc.Invoke(ctx, NoteService_RetrieveNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) RetrieveMultipleNotes(ctx context.Context, in *RetrieveMultipleNotesRequest, opts ...grpc.CallOption) (*RetrieveMultipleNotesResponse, error) {
	out := new(RetrieveMultipleNotesResponse)
	err := c.cc.Invoke(ctx, NoteService_RetrieveMultipleNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) RetrieveMultipleNotesByUserId(ctx context.Context, in *RetrieveMultipleNotesByUserIdRequest, opts ...grpc.CallOption) (*RetrieveMultipleNotesByUserIdResponse, error) {
	out := new(RetrieveMultipleNotesByUserIdResponse)
	err := c.cc.Invoke(ctx, NoteService_RetrieveMultipleNotesByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) RetrieveNoteMetadata(ctx context.Context, in *RetrieveNoteMetadataRequest, opts ...grpc.CallOption) (*RetrieveNoteMetadataResponse, error) {
	out := new(RetrieveNoteMetadataResponse)
	err := c.cc.Invoke(ctx, NoteService_RetrieveNoteMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteServiceClient) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteResponse, error) {
	out := new(UpdateNoteResponse)
	err := c.cc.Invoke(ctx, NoteService_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServiceServer is the server API for NoteService service.
// All implementations must embed UnimplementedNoteServiceServer
// for forward compatibility
type NoteServiceServer interface {
	// Define an RPC method to upload a note
	UploadNote(context.Context, *UploadNoteRequest) (*UploadNoteResponse, error)
	// Define an RPC method to retrieve a note
	RetrieveNote(context.Context, *RetrieveNoteRequest) (*RetrieveNoteResponse, error)
	// Define an RPC method to retrieve multiple notes
	RetrieveMultipleNotes(context.Context, *RetrieveMultipleNotesRequest) (*RetrieveMultipleNotesResponse, error)
	// Define an RPC method to retrieve multiple notes by user id
	RetrieveMultipleNotesByUserId(context.Context, *RetrieveMultipleNotesByUserIdRequest) (*RetrieveMultipleNotesByUserIdResponse, error)
	RetrieveNoteMetadata(context.Context, *RetrieveNoteMetadataRequest) (*RetrieveNoteMetadataResponse, error)
	// Define an RPC method to update notes by note id
	UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteResponse, error)
	mustEmbedUnimplementedNoteServiceServer()
}

// UnimplementedNoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServiceServer struct {
}

func (UnimplementedNoteServiceServer) UploadNote(context.Context, *UploadNoteRequest) (*UploadNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadNote not implemented")
}
func (UnimplementedNoteServiceServer) RetrieveNote(context.Context, *RetrieveNoteRequest) (*RetrieveNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNote not implemented")
}
func (UnimplementedNoteServiceServer) RetrieveMultipleNotes(context.Context, *RetrieveMultipleNotesRequest) (*RetrieveMultipleNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMultipleNotes not implemented")
}
func (UnimplementedNoteServiceServer) RetrieveMultipleNotesByUserId(context.Context, *RetrieveMultipleNotesByUserIdRequest) (*RetrieveMultipleNotesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMultipleNotesByUserId not implemented")
}
func (UnimplementedNoteServiceServer) RetrieveNoteMetadata(context.Context, *RetrieveNoteMetadataRequest) (*RetrieveNoteMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNoteMetadata not implemented")
}
func (UnimplementedNoteServiceServer) UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {}

// UnsafeNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServiceServer will
// result in compilation errors.
type UnsafeNoteServiceServer interface {
	mustEmbedUnimplementedNoteServiceServer()
}

func RegisterNoteServiceServer(s grpc.ServiceRegistrar, srv NoteServiceServer) {
	s.RegisterService(&NoteService_ServiceDesc, srv)
}

func _NoteService_UploadNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).UploadNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_UploadNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).UploadNote(ctx, req.(*UploadNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_RetrieveNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).RetrieveNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_RetrieveNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).RetrieveNote(ctx, req.(*RetrieveNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_RetrieveMultipleNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMultipleNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).RetrieveMultipleNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_RetrieveMultipleNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).RetrieveMultipleNotes(ctx, req.(*RetrieveMultipleNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_RetrieveMultipleNotesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMultipleNotesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).RetrieveMultipleNotesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_RetrieveMultipleNotesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).RetrieveMultipleNotesByUserId(ctx, req.(*RetrieveMultipleNotesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_RetrieveNoteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNoteMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).RetrieveNoteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_RetrieveNoteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).RetrieveNoteMetadata(ctx, req.(*RetrieveNoteMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteService_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServiceServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NoteService_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServiceServer).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteService_ServiceDesc is the grpc.ServiceDesc for NoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadNote",
			Handler:    _NoteService_UploadNote_Handler,
		},
		{
			MethodName: "RetrieveNote",
			Handler:    _NoteService_RetrieveNote_Handler,
		},
		{
			MethodName: "RetrieveMultipleNotes",
			Handler:    _NoteService_RetrieveMultipleNotes_Handler,
		},
		{
			MethodName: "RetrieveMultipleNotesByUserId",
			Handler:    _NoteService_RetrieveMultipleNotesByUserId_Handler,
		},
		{
			MethodName: "RetrieveNoteMetadata",
			Handler:    _NoteService_RetrieveNoteMetadata_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteService_UpdateNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes/notes.proto",
}
