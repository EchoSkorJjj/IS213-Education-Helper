/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: user_storage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as dependency_2 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user_storage_pb {
    export class TestRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): TestRequest {
            const message = new TestRequest({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TestRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TestRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TestRequest {
            return TestRequest.deserialize(bytes);
        }
    }
    export class TestResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): TestResponse {
            const message = new TestResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TestResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TestResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TestResponse {
            return TestResponse.deserialize(bytes);
        }
    }
    export class ResponseMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            timestamp?: dependency_1.google.protobuf.Timestamp;
            success?: boolean;
            error_message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            request_id?: string;
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            success?: boolean;
            error_message?: string;
        }): ResponseMetadata {
            const message = new ResponseMetadata({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                success?: boolean;
                error_message?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.has_timestamp)
                writer.writeMessage(2, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.error_message.length)
                writer.writeString(4, this.error_message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.error_message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseMetadata {
            return ResponseMetadata.deserialize(bytes);
        }
    }
    export class ErrorResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code?: number;
            message?: string;
        }): ErrorResponse {
            const message = new ErrorResponse({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                message?: string;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    export class ServiceResponseWrapper extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            metadata?: ResponseMetadata;
        } & (({
            payload?: dependency_2.google.protobuf.Any;
            error?: never;
        } | {
            payload?: never;
            error?: ErrorResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, ResponseMetadata, 1) as ResponseMetadata;
        }
        set metadata(value: ResponseMetadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2) as dependency_2.google.protobuf.Any;
        }
        set payload(value: dependency_2.google.protobuf.Any) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
        }
        set error(value: ErrorResponse) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get result() {
            const cases: {
                [index: number]: "none" | "payload" | "error";
            } = {
                0: "none",
                2: "payload",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
            payload?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        }): ServiceResponseWrapper {
            const message = new ServiceResponseWrapper({});
            if (data.metadata != null) {
                message.metadata = ResponseMetadata.fromObject(data.metadata);
            }
            if (data.payload != null) {
                message.payload = dependency_2.google.protobuf.Any.fromObject(data.payload);
            }
            if (data.error != null) {
                message.error = ErrorResponse.fromObject(data.error);
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: ReturnType<typeof ResponseMetadata.prototype.toObject>;
                payload?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
                error?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            if (this.error != null) {
                data.error = this.error.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_metadata)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (this.has_payload)
                writer.writeMessage(2, this.payload, () => this.payload.serialize(writer));
            if (this.has_error)
                writer.writeMessage(3, this.error, () => this.error.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceResponseWrapper {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceResponseWrapper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = ResponseMetadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.payload, () => message.payload = dependency_2.google.protobuf.Any.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.error, () => message.error = ErrorResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceResponseWrapper {
            return ServiceResponseWrapper.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            username?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            user_id?: string;
            username?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
        }): User {
            const message = new User({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                username?: string;
                first_name?: string;
                last_name?: string;
                email?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.first_name.length)
                writer.writeString(3, this.first_name);
            if (this.last_name.length)
                writer.writeString(4, this.last_name);
            if (this.email.length)
                writer.writeString(5, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.first_name = reader.readString();
                        break;
                    case 4:
                        message.last_name = reader.readString();
                        break;
                    case 5:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class AuthRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            google_oauth_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("google_oauth_code" in data && data.google_oauth_code != undefined) {
                    this.google_oauth_code = data.google_oauth_code;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get google_oauth_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set google_oauth_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: string;
            google_oauth_code?: string;
        }): AuthRequest {
            const message = new AuthRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.google_oauth_code != null) {
                message.google_oauth_code = data.google_oauth_code;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                google_oauth_code?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.google_oauth_code != null) {
                data.google_oauth_code = this.google_oauth_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.google_oauth_code.length)
                writer.writeString(2, this.google_oauth_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        message.google_oauth_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthRequest {
            return AuthRequest.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: string;
            user_id?: string;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                user_id?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            request_id?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: string;
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set request_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: string;
            user_id?: string;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: string;
                user_id?: string;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeString(1, this.request_id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class HealthCheckRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): HealthCheckRequest {
            const message = new HealthCheckRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckRequest {
            return HealthCheckRequest.deserialize(bytes);
        }
    }
    export class HealthCheckResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): HealthCheckResponse {
            const message = new HealthCheckResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthCheckResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HealthCheckResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HealthCheckResponse {
            return HealthCheckResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserStorageService {
        static definition = {
            Test: {
                path: "/user_storage_pb.UserStorage/Test",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TestRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TestRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TestResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TestResponse.deserialize(new Uint8Array(bytes))
            },
            Authenticate: {
                path: "/user_storage_pb.UserStorage/Authenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServiceResponseWrapper) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServiceResponseWrapper.deserialize(new Uint8Array(bytes))
            },
            GetUser: {
                path: "/user_storage_pb.UserStorage/GetUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServiceResponseWrapper) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServiceResponseWrapper.deserialize(new Uint8Array(bytes))
            },
            UpdateUser: {
                path: "/user_storage_pb.UserStorage/UpdateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServiceResponseWrapper) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServiceResponseWrapper.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/user_storage_pb.UserStorage/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ServiceResponseWrapper) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ServiceResponseWrapper.deserialize(new Uint8Array(bytes))
            },
            CheckHealth: {
                path: "/user_storage_pb.UserStorage/CheckHealth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: HealthCheckRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => HealthCheckRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: HealthCheckResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => HealthCheckResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Test(call: grpc_1.ServerUnaryCall<TestRequest, TestResponse>, callback: grpc_1.sendUnaryData<TestResponse>): void;
        abstract Authenticate(call: grpc_1.ServerUnaryCall<AuthRequest, ServiceResponseWrapper>, callback: grpc_1.sendUnaryData<ServiceResponseWrapper>): void;
        abstract GetUser(call: grpc_1.ServerUnaryCall<GetUserRequest, ServiceResponseWrapper>, callback: grpc_1.sendUnaryData<ServiceResponseWrapper>): void;
        abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, ServiceResponseWrapper>, callback: grpc_1.sendUnaryData<ServiceResponseWrapper>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, ServiceResponseWrapper>, callback: grpc_1.sendUnaryData<ServiceResponseWrapper>): void;
        abstract CheckHealth(call: grpc_1.ServerUnaryCall<HealthCheckRequest, HealthCheckResponse>, callback: grpc_1.sendUnaryData<HealthCheckResponse>): void;
    }
    export class UserStorageClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserStorageService.definition, "UserStorage", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Test: GrpcUnaryServiceInterface<TestRequest, TestResponse> = (message: TestRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TestResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TestResponse>, callback?: grpc_1.requestCallback<TestResponse>): grpc_1.ClientUnaryCall => {
            return super.Test(message, metadata, options, callback);
        };
        Authenticate: GrpcUnaryServiceInterface<AuthRequest, ServiceResponseWrapper> = (message: AuthRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, callback?: grpc_1.requestCallback<ServiceResponseWrapper>): grpc_1.ClientUnaryCall => {
            return super.Authenticate(message, metadata, options, callback);
        };
        GetUser: GrpcUnaryServiceInterface<GetUserRequest, ServiceResponseWrapper> = (message: GetUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, callback?: grpc_1.requestCallback<ServiceResponseWrapper>): grpc_1.ClientUnaryCall => {
            return super.GetUser(message, metadata, options, callback);
        };
        UpdateUser: GrpcUnaryServiceInterface<UpdateUserRequest, ServiceResponseWrapper> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, callback?: grpc_1.requestCallback<ServiceResponseWrapper>): grpc_1.ClientUnaryCall => {
            return super.UpdateUser(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<DeleteUserRequest, ServiceResponseWrapper> = (message: DeleteUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ServiceResponseWrapper>, callback?: grpc_1.requestCallback<ServiceResponseWrapper>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
        CheckHealth: GrpcUnaryServiceInterface<HealthCheckRequest, HealthCheckResponse> = (message: HealthCheckRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<HealthCheckResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<HealthCheckResponse>, callback?: grpc_1.requestCallback<HealthCheckResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckHealth(message, metadata, options, callback);
        };
    }
}
