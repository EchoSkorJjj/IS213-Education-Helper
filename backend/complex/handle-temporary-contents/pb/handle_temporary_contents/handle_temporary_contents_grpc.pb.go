// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: handle_temporary_contents/handle_temporary_contents.proto

package handle_temporary_contents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HandleTemporaryContents_PollTemporaryContents_FullMethodName      = "/handle_temporary_contents_pb.HandleTemporaryContents/PollTemporaryContents"
	HandleTemporaryContents_CreateTemporaryContent_FullMethodName     = "/handle_temporary_contents_pb.HandleTemporaryContents/CreateTemporaryContent"
	HandleTemporaryContents_DeleteTemporaryContent_FullMethodName     = "/handle_temporary_contents_pb.HandleTemporaryContents/DeleteTemporaryContent"
	HandleTemporaryContents_DeleteAllTemporaryContents_FullMethodName = "/handle_temporary_contents_pb.HandleTemporaryContents/DeleteAllTemporaryContents"
	HandleTemporaryContents_UpdateTemporaryContent_FullMethodName     = "/handle_temporary_contents_pb.HandleTemporaryContents/UpdateTemporaryContent"
	HandleTemporaryContents_CommitTemporaryContents_FullMethodName    = "/handle_temporary_contents_pb.HandleTemporaryContents/CommitTemporaryContents"
)

// HandleTemporaryContentsClient is the client API for HandleTemporaryContents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandleTemporaryContentsClient interface {
	PollTemporaryContents(ctx context.Context, in *PollTemporaryContentsRequest, opts ...grpc.CallOption) (*PollTemporaryContentsResponse, error)
	CreateTemporaryContent(ctx context.Context, in *CreateTemporaryContentRequest, opts ...grpc.CallOption) (*CreateTemporaryContentResponse, error)
	DeleteTemporaryContent(ctx context.Context, in *DeleteTemporaryContentRequest, opts ...grpc.CallOption) (*DeleteTemporaryContentResponse, error)
	DeleteAllTemporaryContents(ctx context.Context, in *DeleteAllTemporaryContentsRequest, opts ...grpc.CallOption) (*DeleteAllTemporaryContentsResponse, error)
	UpdateTemporaryContent(ctx context.Context, in *UpdateTemporaryContentRequest, opts ...grpc.CallOption) (*UpdateTemporaryContentResponse, error)
	CommitTemporaryContents(ctx context.Context, in *CommitTemporaryContentsRequest, opts ...grpc.CallOption) (*CommitTemporaryContentsResponse, error)
}

type handleTemporaryContentsClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleTemporaryContentsClient(cc grpc.ClientConnInterface) HandleTemporaryContentsClient {
	return &handleTemporaryContentsClient{cc}
}

func (c *handleTemporaryContentsClient) PollTemporaryContents(ctx context.Context, in *PollTemporaryContentsRequest, opts ...grpc.CallOption) (*PollTemporaryContentsResponse, error) {
	out := new(PollTemporaryContentsResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_PollTemporaryContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleTemporaryContentsClient) CreateTemporaryContent(ctx context.Context, in *CreateTemporaryContentRequest, opts ...grpc.CallOption) (*CreateTemporaryContentResponse, error) {
	out := new(CreateTemporaryContentResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_CreateTemporaryContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleTemporaryContentsClient) DeleteTemporaryContent(ctx context.Context, in *DeleteTemporaryContentRequest, opts ...grpc.CallOption) (*DeleteTemporaryContentResponse, error) {
	out := new(DeleteTemporaryContentResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_DeleteTemporaryContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleTemporaryContentsClient) DeleteAllTemporaryContents(ctx context.Context, in *DeleteAllTemporaryContentsRequest, opts ...grpc.CallOption) (*DeleteAllTemporaryContentsResponse, error) {
	out := new(DeleteAllTemporaryContentsResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_DeleteAllTemporaryContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleTemporaryContentsClient) UpdateTemporaryContent(ctx context.Context, in *UpdateTemporaryContentRequest, opts ...grpc.CallOption) (*UpdateTemporaryContentResponse, error) {
	out := new(UpdateTemporaryContentResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_UpdateTemporaryContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleTemporaryContentsClient) CommitTemporaryContents(ctx context.Context, in *CommitTemporaryContentsRequest, opts ...grpc.CallOption) (*CommitTemporaryContentsResponse, error) {
	out := new(CommitTemporaryContentsResponse)
	err := c.cc.Invoke(ctx, HandleTemporaryContents_CommitTemporaryContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleTemporaryContentsServer is the server API for HandleTemporaryContents service.
// All implementations must embed UnimplementedHandleTemporaryContentsServer
// for forward compatibility
type HandleTemporaryContentsServer interface {
	PollTemporaryContents(context.Context, *PollTemporaryContentsRequest) (*PollTemporaryContentsResponse, error)
	CreateTemporaryContent(context.Context, *CreateTemporaryContentRequest) (*CreateTemporaryContentResponse, error)
	DeleteTemporaryContent(context.Context, *DeleteTemporaryContentRequest) (*DeleteTemporaryContentResponse, error)
	DeleteAllTemporaryContents(context.Context, *DeleteAllTemporaryContentsRequest) (*DeleteAllTemporaryContentsResponse, error)
	UpdateTemporaryContent(context.Context, *UpdateTemporaryContentRequest) (*UpdateTemporaryContentResponse, error)
	CommitTemporaryContents(context.Context, *CommitTemporaryContentsRequest) (*CommitTemporaryContentsResponse, error)
	mustEmbedUnimplementedHandleTemporaryContentsServer()
}

// UnimplementedHandleTemporaryContentsServer must be embedded to have forward compatible implementations.
type UnimplementedHandleTemporaryContentsServer struct {
}

func (UnimplementedHandleTemporaryContentsServer) PollTemporaryContents(context.Context, *PollTemporaryContentsRequest) (*PollTemporaryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollTemporaryContents not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) CreateTemporaryContent(context.Context, *CreateTemporaryContentRequest) (*CreateTemporaryContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryContent not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) DeleteTemporaryContent(context.Context, *DeleteTemporaryContentRequest) (*DeleteTemporaryContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemporaryContent not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) DeleteAllTemporaryContents(context.Context, *DeleteAllTemporaryContentsRequest) (*DeleteAllTemporaryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllTemporaryContents not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) UpdateTemporaryContent(context.Context, *UpdateTemporaryContentRequest) (*UpdateTemporaryContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemporaryContent not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) CommitTemporaryContents(context.Context, *CommitTemporaryContentsRequest) (*CommitTemporaryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTemporaryContents not implemented")
}
func (UnimplementedHandleTemporaryContentsServer) mustEmbedUnimplementedHandleTemporaryContentsServer() {
}

// UnsafeHandleTemporaryContentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandleTemporaryContentsServer will
// result in compilation errors.
type UnsafeHandleTemporaryContentsServer interface {
	mustEmbedUnimplementedHandleTemporaryContentsServer()
}

func RegisterHandleTemporaryContentsServer(s grpc.ServiceRegistrar, srv HandleTemporaryContentsServer) {
	s.RegisterService(&HandleTemporaryContents_ServiceDesc, srv)
}

func _HandleTemporaryContents_PollTemporaryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollTemporaryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).PollTemporaryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_PollTemporaryContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).PollTemporaryContents(ctx, req.(*PollTemporaryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleTemporaryContents_CreateTemporaryContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).CreateTemporaryContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_CreateTemporaryContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).CreateTemporaryContent(ctx, req.(*CreateTemporaryContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleTemporaryContents_DeleteTemporaryContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemporaryContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).DeleteTemporaryContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_DeleteTemporaryContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).DeleteTemporaryContent(ctx, req.(*DeleteTemporaryContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleTemporaryContents_DeleteAllTemporaryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllTemporaryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).DeleteAllTemporaryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_DeleteAllTemporaryContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).DeleteAllTemporaryContents(ctx, req.(*DeleteAllTemporaryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleTemporaryContents_UpdateTemporaryContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemporaryContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).UpdateTemporaryContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_UpdateTemporaryContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).UpdateTemporaryContent(ctx, req.(*UpdateTemporaryContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleTemporaryContents_CommitTemporaryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTemporaryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleTemporaryContentsServer).CommitTemporaryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandleTemporaryContents_CommitTemporaryContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleTemporaryContentsServer).CommitTemporaryContents(ctx, req.(*CommitTemporaryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HandleTemporaryContents_ServiceDesc is the grpc.ServiceDesc for HandleTemporaryContents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandleTemporaryContents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handle_temporary_contents_pb.HandleTemporaryContents",
	HandlerType: (*HandleTemporaryContentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollTemporaryContents",
			Handler:    _HandleTemporaryContents_PollTemporaryContents_Handler,
		},
		{
			MethodName: "CreateTemporaryContent",
			Handler:    _HandleTemporaryContents_CreateTemporaryContent_Handler,
		},
		{
			MethodName: "DeleteTemporaryContent",
			Handler:    _HandleTemporaryContents_DeleteTemporaryContent_Handler,
		},
		{
			MethodName: "DeleteAllTemporaryContents",
			Handler:    _HandleTemporaryContents_DeleteAllTemporaryContents_Handler,
		},
		{
			MethodName: "UpdateTemporaryContent",
			Handler:    _HandleTemporaryContents_UpdateTemporaryContent_Handler,
		},
		{
			MethodName: "CommitTemporaryContents",
			Handler:    _HandleTemporaryContents_CommitTemporaryContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "handle_temporary_contents/handle_temporary_contents.proto",
}
