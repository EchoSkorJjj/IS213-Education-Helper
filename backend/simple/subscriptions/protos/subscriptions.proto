syntax = "proto3";

package subscription_pb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

message ResponseMetadata {
    string request_id = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message ServiceResponseWrapper {
    ResponseMetadata metadata = 1;
    google.protobuf.Any payload = 2;
}

// Might need to update message name or service name,
// temporarily call it SubscriptionMessage for now to
// prevent naming conflict with the service name.
message SubscriptionMessage {
    // could we make user_id the primary key instead?
    // For now assume subscription_id is required.
    string subscription_id = 1;
    string user_id = 2;
    google.protobuf.Timestamp subscribed_until = 3;
}

message CreateSubscriptionRequest {
    string user_id = 1;
    // may or may not need this, depending on whether we offer different subscription types
    // (e.g. 1 month, 1 year, unlimited). For now assume it is required.
    google.protobuf.Timestamp subscribed_until = 2;
}

message CreateSubscriptionResponse {
    ResponseMetadata metadata = 1;
    SubscriptionMessage details = 2;
}

message GetSubscriptionRequest {
    string user_id = 1;
}

message GetSubscriptionResponse {
    ResponseMetadata metadata = 1;
    SubscriptionMessage details = 2;
}

message UpdateSubscriptionRequest {
    string user_id = 1;
    google.protobuf.Timestamp subscribed_until = 2;
}

message UpdateSubscriptionResponse {
    ResponseMetadata metadata = 1;
    SubscriptionMessage details = 2;
}

message DeleteSubscriptionRequest {
    string user_id = 1;
}

message DeleteSubscriptionResponse {
    ResponseMetadata metadata = 1;
    string subscription_id = 2;
    string user_id = 3;
}

message HealthCheckRequest {

}

message HealthCheckResponse {
    string status = 1;
}

service Subscription {
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);
    rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse);
    rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse);
    rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse);
    rpc CheckHealth(HealthCheckRequest) returns (HealthCheckResponse);
}