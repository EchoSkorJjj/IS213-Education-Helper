syntax = "proto3";

package user_storage_pb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// Simplified Metadata for responses
message ResponseMetadata {
  string request_id = 1;
  google.protobuf.Timestamp timestamp = 2;
}

// General response wrapper for all service responses
message ServiceResponseWrapper {
  ResponseMetadata metadata = 1;
  google.protobuf.Any payload = 2; // Flexible payload using Any
}

// Simplified User definition for demonstration
message User {
  string user_id = 1;
  string username = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
}

// Singpass MyInfo generate challenge code request
message MyInfoCodeRequest {
}

message MyInfoCodeResponse {
    string code_challenge = 1;
}

// Singpass SgId generate auth url request
message SgIdAuthUrlRequest {
}

message SgIdAuthUrlResponse {
  string auth_url = 1;
}

// Request and response messages
message AuthRequest {
  string code = 1;
}

message GetUserRequest {
  string user_id = 1;
}

message UpdateUserRequest {
  User user = 1; // Using User message for updates
}

message DeleteUserRequest {
  string user_id = 1;
}

message LogoutRequest {
}

message SaveNoteRequest {
  string user_id = 1;
  repeated string notes_ids = 2; // Allows for one or more notes to be specified
}

message SaveNoteResponse {
  bool success = 1;
  repeated string saved_notes_ids = 2; // IDs of notes successfully saved
}

// New message for deleting a saved note
message DeleteSavedNoteRequest {
  string user_id = 1;
  string note_id = 2;
}

message DeleteSavedNoteResponse {
  bool success = 1;
}


// Service definition with CRUD operations and health check
service UserStorage {
  rpc GoogleAuth(AuthRequest) returns (ServiceResponseWrapper);
  rpc MyInfoCode(MyInfoCodeRequest) returns (MyInfoCodeResponse);
  rpc MyInfoAuth(AuthRequest) returns (ServiceResponseWrapper);
  rpc SgIdAuthUrl(SgIdAuthUrlRequest) returns (SgIdAuthUrlResponse);
  rpc SgIdAuth(AuthRequest) returns (ServiceResponseWrapper);
  rpc Logout(LogoutRequest) returns (ServiceResponseWrapper);
  rpc GetUser(GetUserRequest) returns (ServiceResponseWrapper);
  rpc UpdateUser(UpdateUserRequest) returns (ServiceResponseWrapper);
  rpc DeleteUser(DeleteUserRequest) returns (ServiceResponseWrapper);
  rpc SaveNote(SaveNoteRequest) returns (SaveNoteResponse);
  rpc DeleteSavedNote(DeleteSavedNoteRequest) returns (DeleteSavedNoteResponse);
}