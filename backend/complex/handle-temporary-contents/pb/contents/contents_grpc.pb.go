// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: contents/contents.proto

package contents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Content_CreateTemporaryFlashcard_FullMethodName              = "/content_pb.Content/CreateTemporaryFlashcard"
	Content_CreateTemporaryMultipleChoiceQuestion_FullMethodName = "/content_pb.Content/CreateTemporaryMultipleChoiceQuestion"
	Content_UpdateTemporaryFlashcard_FullMethodName              = "/content_pb.Content/UpdateTemporaryFlashcard"
	Content_UpdateTemporaryMultipleChoiceQuestion_FullMethodName = "/content_pb.Content/UpdateTemporaryMultipleChoiceQuestion"
	Content_DeleteTemporaryFlashcard_FullMethodName              = "/content_pb.Content/DeleteTemporaryFlashcard"
	Content_DeleteTemporaryMultipleChoiceQuestion_FullMethodName = "/content_pb.Content/DeleteTemporaryMultipleChoiceQuestion"
	Content_GetAllTemporaryContents_FullMethodName               = "/content_pb.Content/GetAllTemporaryContents"
	Content_CommitTemporaryContents_FullMethodName               = "/content_pb.Content/CommitTemporaryContents"
	Content_GetSavedContents_FullMethodName                      = "/content_pb.Content/GetSavedContents"
)

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	CreateTemporaryFlashcard(ctx context.Context, in *CreateTemporaryFlashcardRequest, opts ...grpc.CallOption) (*CreateTemporaryFlashcardResponse, error)
	CreateTemporaryMultipleChoiceQuestion(ctx context.Context, in *CreateTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*CreateTemporaryMultipleChoiceQuestionResponse, error)
	UpdateTemporaryFlashcard(ctx context.Context, in *UpdateTemporaryFlashcardRequest, opts ...grpc.CallOption) (*UpdateTemporaryFlashcardResponse, error)
	UpdateTemporaryMultipleChoiceQuestion(ctx context.Context, in *UpdateTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*UpdateTemporaryMultipleChoiceQuestionResponse, error)
	DeleteTemporaryFlashcard(ctx context.Context, in *DeleteTemporaryFlashcardRequest, opts ...grpc.CallOption) (*DeleteTemporaryFlashcardResponse, error)
	DeleteTemporaryMultipleChoiceQuestion(ctx context.Context, in *DeleteTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*DeleteTemporaryMultipleChoiceQuestionResponse, error)
	GetAllTemporaryContents(ctx context.Context, in *GetAllTemporaryContentsRequest, opts ...grpc.CallOption) (*GetAllTemporaryContentsResponse, error)
	CommitTemporaryContents(ctx context.Context, in *CommitTemporaryContentsRequest, opts ...grpc.CallOption) (*CommitTemporaryContentsResponse, error)
	GetSavedContents(ctx context.Context, in *GetSavedContentsRequest, opts ...grpc.CallOption) (*GetSavedContentsResponse, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) CreateTemporaryFlashcard(ctx context.Context, in *CreateTemporaryFlashcardRequest, opts ...grpc.CallOption) (*CreateTemporaryFlashcardResponse, error) {
	out := new(CreateTemporaryFlashcardResponse)
	err := c.cc.Invoke(ctx, Content_CreateTemporaryFlashcard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CreateTemporaryMultipleChoiceQuestion(ctx context.Context, in *CreateTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*CreateTemporaryMultipleChoiceQuestionResponse, error) {
	out := new(CreateTemporaryMultipleChoiceQuestionResponse)
	err := c.cc.Invoke(ctx, Content_CreateTemporaryMultipleChoiceQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateTemporaryFlashcard(ctx context.Context, in *UpdateTemporaryFlashcardRequest, opts ...grpc.CallOption) (*UpdateTemporaryFlashcardResponse, error) {
	out := new(UpdateTemporaryFlashcardResponse)
	err := c.cc.Invoke(ctx, Content_UpdateTemporaryFlashcard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) UpdateTemporaryMultipleChoiceQuestion(ctx context.Context, in *UpdateTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*UpdateTemporaryMultipleChoiceQuestionResponse, error) {
	out := new(UpdateTemporaryMultipleChoiceQuestionResponse)
	err := c.cc.Invoke(ctx, Content_UpdateTemporaryMultipleChoiceQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteTemporaryFlashcard(ctx context.Context, in *DeleteTemporaryFlashcardRequest, opts ...grpc.CallOption) (*DeleteTemporaryFlashcardResponse, error) {
	out := new(DeleteTemporaryFlashcardResponse)
	err := c.cc.Invoke(ctx, Content_DeleteTemporaryFlashcard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) DeleteTemporaryMultipleChoiceQuestion(ctx context.Context, in *DeleteTemporaryMultipleChoiceQuestionRequest, opts ...grpc.CallOption) (*DeleteTemporaryMultipleChoiceQuestionResponse, error) {
	out := new(DeleteTemporaryMultipleChoiceQuestionResponse)
	err := c.cc.Invoke(ctx, Content_DeleteTemporaryMultipleChoiceQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetAllTemporaryContents(ctx context.Context, in *GetAllTemporaryContentsRequest, opts ...grpc.CallOption) (*GetAllTemporaryContentsResponse, error) {
	out := new(GetAllTemporaryContentsResponse)
	err := c.cc.Invoke(ctx, Content_GetAllTemporaryContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) CommitTemporaryContents(ctx context.Context, in *CommitTemporaryContentsRequest, opts ...grpc.CallOption) (*CommitTemporaryContentsResponse, error) {
	out := new(CommitTemporaryContentsResponse)
	err := c.cc.Invoke(ctx, Content_CommitTemporaryContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) GetSavedContents(ctx context.Context, in *GetSavedContentsRequest, opts ...grpc.CallOption) (*GetSavedContentsResponse, error) {
	out := new(GetSavedContentsResponse)
	err := c.cc.Invoke(ctx, Content_GetSavedContents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility
type ContentServer interface {
	CreateTemporaryFlashcard(context.Context, *CreateTemporaryFlashcardRequest) (*CreateTemporaryFlashcardResponse, error)
	CreateTemporaryMultipleChoiceQuestion(context.Context, *CreateTemporaryMultipleChoiceQuestionRequest) (*CreateTemporaryMultipleChoiceQuestionResponse, error)
	UpdateTemporaryFlashcard(context.Context, *UpdateTemporaryFlashcardRequest) (*UpdateTemporaryFlashcardResponse, error)
	UpdateTemporaryMultipleChoiceQuestion(context.Context, *UpdateTemporaryMultipleChoiceQuestionRequest) (*UpdateTemporaryMultipleChoiceQuestionResponse, error)
	DeleteTemporaryFlashcard(context.Context, *DeleteTemporaryFlashcardRequest) (*DeleteTemporaryFlashcardResponse, error)
	DeleteTemporaryMultipleChoiceQuestion(context.Context, *DeleteTemporaryMultipleChoiceQuestionRequest) (*DeleteTemporaryMultipleChoiceQuestionResponse, error)
	GetAllTemporaryContents(context.Context, *GetAllTemporaryContentsRequest) (*GetAllTemporaryContentsResponse, error)
	CommitTemporaryContents(context.Context, *CommitTemporaryContentsRequest) (*CommitTemporaryContentsResponse, error)
	GetSavedContents(context.Context, *GetSavedContentsRequest) (*GetSavedContentsResponse, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have forward compatible implementations.
type UnimplementedContentServer struct {
}

func (UnimplementedContentServer) CreateTemporaryFlashcard(context.Context, *CreateTemporaryFlashcardRequest) (*CreateTemporaryFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryFlashcard not implemented")
}
func (UnimplementedContentServer) CreateTemporaryMultipleChoiceQuestion(context.Context, *CreateTemporaryMultipleChoiceQuestionRequest) (*CreateTemporaryMultipleChoiceQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemporaryMultipleChoiceQuestion not implemented")
}
func (UnimplementedContentServer) UpdateTemporaryFlashcard(context.Context, *UpdateTemporaryFlashcardRequest) (*UpdateTemporaryFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemporaryFlashcard not implemented")
}
func (UnimplementedContentServer) UpdateTemporaryMultipleChoiceQuestion(context.Context, *UpdateTemporaryMultipleChoiceQuestionRequest) (*UpdateTemporaryMultipleChoiceQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemporaryMultipleChoiceQuestion not implemented")
}
func (UnimplementedContentServer) DeleteTemporaryFlashcard(context.Context, *DeleteTemporaryFlashcardRequest) (*DeleteTemporaryFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemporaryFlashcard not implemented")
}
func (UnimplementedContentServer) DeleteTemporaryMultipleChoiceQuestion(context.Context, *DeleteTemporaryMultipleChoiceQuestionRequest) (*DeleteTemporaryMultipleChoiceQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemporaryMultipleChoiceQuestion not implemented")
}
func (UnimplementedContentServer) GetAllTemporaryContents(context.Context, *GetAllTemporaryContentsRequest) (*GetAllTemporaryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTemporaryContents not implemented")
}
func (UnimplementedContentServer) CommitTemporaryContents(context.Context, *CommitTemporaryContentsRequest) (*CommitTemporaryContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTemporaryContents not implemented")
}
func (UnimplementedContentServer) GetSavedContents(context.Context, *GetSavedContentsRequest) (*GetSavedContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedContents not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_CreateTemporaryFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateTemporaryFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateTemporaryFlashcard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateTemporaryFlashcard(ctx, req.(*CreateTemporaryFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CreateTemporaryMultipleChoiceQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemporaryMultipleChoiceQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CreateTemporaryMultipleChoiceQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CreateTemporaryMultipleChoiceQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CreateTemporaryMultipleChoiceQuestion(ctx, req.(*CreateTemporaryMultipleChoiceQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateTemporaryFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemporaryFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateTemporaryFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_UpdateTemporaryFlashcard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateTemporaryFlashcard(ctx, req.(*UpdateTemporaryFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_UpdateTemporaryMultipleChoiceQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemporaryMultipleChoiceQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).UpdateTemporaryMultipleChoiceQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_UpdateTemporaryMultipleChoiceQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).UpdateTemporaryMultipleChoiceQuestion(ctx, req.(*UpdateTemporaryMultipleChoiceQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteTemporaryFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemporaryFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteTemporaryFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_DeleteTemporaryFlashcard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteTemporaryFlashcard(ctx, req.(*DeleteTemporaryFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_DeleteTemporaryMultipleChoiceQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemporaryMultipleChoiceQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).DeleteTemporaryMultipleChoiceQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_DeleteTemporaryMultipleChoiceQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).DeleteTemporaryMultipleChoiceQuestion(ctx, req.(*DeleteTemporaryMultipleChoiceQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetAllTemporaryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTemporaryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetAllTemporaryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetAllTemporaryContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetAllTemporaryContents(ctx, req.(*GetAllTemporaryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_CommitTemporaryContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTemporaryContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).CommitTemporaryContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_CommitTemporaryContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).CommitTemporaryContents(ctx, req.(*CommitTemporaryContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_GetSavedContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).GetSavedContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_GetSavedContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).GetSavedContents(ctx, req.(*GetSavedContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content_pb.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemporaryFlashcard",
			Handler:    _Content_CreateTemporaryFlashcard_Handler,
		},
		{
			MethodName: "CreateTemporaryMultipleChoiceQuestion",
			Handler:    _Content_CreateTemporaryMultipleChoiceQuestion_Handler,
		},
		{
			MethodName: "UpdateTemporaryFlashcard",
			Handler:    _Content_UpdateTemporaryFlashcard_Handler,
		},
		{
			MethodName: "UpdateTemporaryMultipleChoiceQuestion",
			Handler:    _Content_UpdateTemporaryMultipleChoiceQuestion_Handler,
		},
		{
			MethodName: "DeleteTemporaryFlashcard",
			Handler:    _Content_DeleteTemporaryFlashcard_Handler,
		},
		{
			MethodName: "DeleteTemporaryMultipleChoiceQuestion",
			Handler:    _Content_DeleteTemporaryMultipleChoiceQuestion_Handler,
		},
		{
			MethodName: "GetAllTemporaryContents",
			Handler:    _Content_GetAllTemporaryContents_Handler,
		},
		{
			MethodName: "CommitTemporaryContents",
			Handler:    _Content_CommitTemporaryContents_Handler,
		},
		{
			MethodName: "GetSavedContents",
			Handler:    _Content_GetSavedContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contents/contents.proto",
}
