// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: handle_temporary_contents/handle_temporary_contents.proto

package handle_temporary_contents

import (
	contents "github.com/EchoSkorJjj/IS213-Education-Helper/handle-temporary-contents/pb/contents"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Feels really verbose... but protobuf doesn't currently support
// repeated oneofs. This was recommended by a collaborator on the project.
type OneOfContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*OneOfContent_Flashcard
	//	*OneOfContent_Mcq
	Content isOneOfContent_Content `protobuf_oneof:"content"`
}

func (x *OneOfContent) Reset() {
	*x = OneOfContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfContent) ProtoMessage() {}

func (x *OneOfContent) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfContent.ProtoReflect.Descriptor instead.
func (*OneOfContent) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{0}
}

func (m *OneOfContent) GetContent() isOneOfContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *OneOfContent) GetFlashcard() *contents.Flashcard {
	if x, ok := x.GetContent().(*OneOfContent_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *OneOfContent) GetMcq() *contents.MultipleChoiceQuestion {
	if x, ok := x.GetContent().(*OneOfContent_Mcq); ok {
		return x.Mcq
	}
	return nil
}

type isOneOfContent_Content interface {
	isOneOfContent_Content()
}

type OneOfContent_Flashcard struct {
	Flashcard *contents.Flashcard `protobuf:"bytes,1,opt,name=flashcard,proto3,oneof"`
}

type OneOfContent_Mcq struct {
	Mcq *contents.MultipleChoiceQuestion `protobuf:"bytes,2,opt,name=mcq,proto3,oneof"`
}

func (*OneOfContent_Flashcard) isOneOfContent_Content() {}

func (*OneOfContent_Mcq) isOneOfContent_Content() {}

type PollTemporaryContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
}

func (x *PollTemporaryContentsRequest) Reset() {
	*x = PollTemporaryContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTemporaryContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTemporaryContentsRequest) ProtoMessage() {}

func (x *PollTemporaryContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTemporaryContentsRequest.ProtoReflect.Descriptor instead.
func (*PollTemporaryContentsRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{1}
}

func (x *PollTemporaryContentsRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

type PollTemporaryContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents []*OneOfContent `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
}

func (x *PollTemporaryContentsResponse) Reset() {
	*x = PollTemporaryContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollTemporaryContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollTemporaryContentsResponse) ProtoMessage() {}

func (x *PollTemporaryContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollTemporaryContentsResponse.ProtoReflect.Descriptor instead.
func (*PollTemporaryContentsResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{2}
}

func (x *PollTemporaryContentsResponse) GetContents() []*OneOfContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CreateTemporaryContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId      string               `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	ContentType contents.ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,proto3,enum=content_pb.ContentType" json:"content_type,omitempty"`
	Content     *OneOfContent        `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateTemporaryContentRequest) Reset() {
	*x = CreateTemporaryContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemporaryContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemporaryContentRequest) ProtoMessage() {}

func (x *CreateTemporaryContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemporaryContentRequest.ProtoReflect.Descriptor instead.
func (*CreateTemporaryContentRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTemporaryContentRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *CreateTemporaryContentRequest) GetContentType() contents.ContentType {
	if x != nil {
		return x.ContentType
	}
	return contents.ContentType(0)
}

func (x *CreateTemporaryContentRequest) GetContent() *OneOfContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type CreateTemporaryContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CreatedContent *OneOfContent `protobuf:"bytes,2,opt,name=created_content,json=createdContent,proto3" json:"created_content,omitempty"`
}

func (x *CreateTemporaryContentResponse) Reset() {
	*x = CreateTemporaryContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemporaryContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemporaryContentResponse) ProtoMessage() {}

func (x *CreateTemporaryContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemporaryContentResponse.ProtoReflect.Descriptor instead.
func (*CreateTemporaryContentResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTemporaryContentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTemporaryContentResponse) GetCreatedContent() *OneOfContent {
	if x != nil {
		return x.CreatedContent
	}
	return nil
}

type DeleteTemporaryContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId      string               `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	ContentType contents.ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,proto3,enum=content_pb.ContentType" json:"content_type,omitempty"`
	ContentId   string               `protobuf:"bytes,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
}

func (x *DeleteTemporaryContentRequest) Reset() {
	*x = DeleteTemporaryContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTemporaryContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTemporaryContentRequest) ProtoMessage() {}

func (x *DeleteTemporaryContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTemporaryContentRequest.ProtoReflect.Descriptor instead.
func (*DeleteTemporaryContentRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteTemporaryContentRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *DeleteTemporaryContentRequest) GetContentType() contents.ContentType {
	if x != nil {
		return x.ContentType
	}
	return contents.ContentType(0)
}

func (x *DeleteTemporaryContentRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

type DeleteTemporaryContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	DeletedContent *OneOfContent `protobuf:"bytes,2,opt,name=deleted_content,json=deletedContent,proto3" json:"deleted_content,omitempty"`
}

func (x *DeleteTemporaryContentResponse) Reset() {
	*x = DeleteTemporaryContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTemporaryContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTemporaryContentResponse) ProtoMessage() {}

func (x *DeleteTemporaryContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTemporaryContentResponse.ProtoReflect.Descriptor instead.
func (*DeleteTemporaryContentResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTemporaryContentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTemporaryContentResponse) GetDeletedContent() *OneOfContent {
	if x != nil {
		return x.DeletedContent
	}
	return nil
}

type DeleteAllTemporaryContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
}

func (x *DeleteAllTemporaryContentsRequest) Reset() {
	*x = DeleteAllTemporaryContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllTemporaryContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllTemporaryContentsRequest) ProtoMessage() {}

func (x *DeleteAllTemporaryContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllTemporaryContentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllTemporaryContentsRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteAllTemporaryContentsRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

type DeleteAllTemporaryContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	DeletedContents []*OneOfContent `protobuf:"bytes,2,rep,name=deleted_contents,json=deletedContents,proto3" json:"deleted_contents,omitempty"`
}

func (x *DeleteAllTemporaryContentsResponse) Reset() {
	*x = DeleteAllTemporaryContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllTemporaryContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllTemporaryContentsResponse) ProtoMessage() {}

func (x *DeleteAllTemporaryContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllTemporaryContentsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllTemporaryContentsResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteAllTemporaryContentsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteAllTemporaryContentsResponse) GetDeletedContents() []*OneOfContent {
	if x != nil {
		return x.DeletedContents
	}
	return nil
}

type UpdateTemporaryContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId      string               `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	ContentType contents.ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,proto3,enum=content_pb.ContentType" json:"content_type,omitempty"`
	ContentId   string               `protobuf:"bytes,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Content     *OneOfContent        `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UpdateTemporaryContentRequest) Reset() {
	*x = UpdateTemporaryContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemporaryContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemporaryContentRequest) ProtoMessage() {}

func (x *UpdateTemporaryContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemporaryContentRequest.ProtoReflect.Descriptor instead.
func (*UpdateTemporaryContentRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTemporaryContentRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UpdateTemporaryContentRequest) GetContentType() contents.ContentType {
	if x != nil {
		return x.ContentType
	}
	return contents.ContentType(0)
}

func (x *UpdateTemporaryContentRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *UpdateTemporaryContentRequest) GetContent() *OneOfContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type UpdateTemporaryContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	UpdatedContent *OneOfContent `protobuf:"bytes,2,opt,name=updated_content,json=updatedContent,proto3" json:"updated_content,omitempty"`
}

func (x *UpdateTemporaryContentResponse) Reset() {
	*x = UpdateTemporaryContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTemporaryContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTemporaryContentResponse) ProtoMessage() {}

func (x *UpdateTemporaryContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTemporaryContentResponse.ProtoReflect.Descriptor instead.
func (*UpdateTemporaryContentResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTemporaryContentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateTemporaryContentResponse) GetUpdatedContent() *OneOfContent {
	if x != nil {
		return x.UpdatedContent
	}
	return nil
}

type CommitTemporaryContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteId string `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Topic  string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *CommitTemporaryContentsRequest) Reset() {
	*x = CommitTemporaryContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTemporaryContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTemporaryContentsRequest) ProtoMessage() {}

func (x *CommitTemporaryContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTemporaryContentsRequest.ProtoReflect.Descriptor instead.
func (*CommitTemporaryContentsRequest) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{11}
}

func (x *CommitTemporaryContentsRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *CommitTemporaryContentsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CommitTemporaryContentsRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type CommitTemporaryContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CommitTemporaryContentsResponse) Reset() {
	*x = CommitTemporaryContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTemporaryContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTemporaryContentsResponse) ProtoMessage() {}

func (x *CommitTemporaryContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTemporaryContentsResponse.ProtoReflect.Descriptor instead.
func (*CommitTemporaryContentsResponse) Descriptor() ([]byte, []int) {
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP(), []int{12}
}

func (x *CommitTemporaryContentsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_handle_temporary_contents_handle_temporary_contents_proto protoreflect.FileDescriptor

var file_handle_temporary_contents_handle_temporary_contents_proto_rawDesc = []byte{
	0x0a, 0x39, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x6d, 0x63,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x63, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a,
	0x1c, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xba, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x93,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x53, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x65, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x1e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x3b, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xb5,
	0x07, 0x0a, 0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x50,
	0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x95, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa1, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x17,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66, 0x5a, 0x64, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x6b, 0x6f, 0x72, 0x4a, 0x6a, 0x6a,
	0x2f, 0x49, 0x53, 0x32, 0x31, 0x33, 0x2d, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2d, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x70, 0x62, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2d, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handle_temporary_contents_handle_temporary_contents_proto_rawDescOnce sync.Once
	file_handle_temporary_contents_handle_temporary_contents_proto_rawDescData = file_handle_temporary_contents_handle_temporary_contents_proto_rawDesc
)

func file_handle_temporary_contents_handle_temporary_contents_proto_rawDescGZIP() []byte {
	file_handle_temporary_contents_handle_temporary_contents_proto_rawDescOnce.Do(func() {
		file_handle_temporary_contents_handle_temporary_contents_proto_rawDescData = protoimpl.X.CompressGZIP(file_handle_temporary_contents_handle_temporary_contents_proto_rawDescData)
	})
	return file_handle_temporary_contents_handle_temporary_contents_proto_rawDescData
}

var file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_handle_temporary_contents_handle_temporary_contents_proto_goTypes = []interface{}{
	(*OneOfContent)(nil),                       // 0: handle_temporary_contents_pb.OneOfContent
	(*PollTemporaryContentsRequest)(nil),       // 1: handle_temporary_contents_pb.PollTemporaryContentsRequest
	(*PollTemporaryContentsResponse)(nil),      // 2: handle_temporary_contents_pb.PollTemporaryContentsResponse
	(*CreateTemporaryContentRequest)(nil),      // 3: handle_temporary_contents_pb.CreateTemporaryContentRequest
	(*CreateTemporaryContentResponse)(nil),     // 4: handle_temporary_contents_pb.CreateTemporaryContentResponse
	(*DeleteTemporaryContentRequest)(nil),      // 5: handle_temporary_contents_pb.DeleteTemporaryContentRequest
	(*DeleteTemporaryContentResponse)(nil),     // 6: handle_temporary_contents_pb.DeleteTemporaryContentResponse
	(*DeleteAllTemporaryContentsRequest)(nil),  // 7: handle_temporary_contents_pb.DeleteAllTemporaryContentsRequest
	(*DeleteAllTemporaryContentsResponse)(nil), // 8: handle_temporary_contents_pb.DeleteAllTemporaryContentsResponse
	(*UpdateTemporaryContentRequest)(nil),      // 9: handle_temporary_contents_pb.UpdateTemporaryContentRequest
	(*UpdateTemporaryContentResponse)(nil),     // 10: handle_temporary_contents_pb.UpdateTemporaryContentResponse
	(*CommitTemporaryContentsRequest)(nil),     // 11: handle_temporary_contents_pb.CommitTemporaryContentsRequest
	(*CommitTemporaryContentsResponse)(nil),    // 12: handle_temporary_contents_pb.CommitTemporaryContentsResponse
	(*contents.Flashcard)(nil),                 // 13: content_pb.Flashcard
	(*contents.MultipleChoiceQuestion)(nil),    // 14: content_pb.MultipleChoiceQuestion
	(contents.ContentType)(0),                  // 15: content_pb.ContentType
}
var file_handle_temporary_contents_handle_temporary_contents_proto_depIdxs = []int32{
	13, // 0: handle_temporary_contents_pb.OneOfContent.flashcard:type_name -> content_pb.Flashcard
	14, // 1: handle_temporary_contents_pb.OneOfContent.mcq:type_name -> content_pb.MultipleChoiceQuestion
	0,  // 2: handle_temporary_contents_pb.PollTemporaryContentsResponse.contents:type_name -> handle_temporary_contents_pb.OneOfContent
	15, // 3: handle_temporary_contents_pb.CreateTemporaryContentRequest.content_type:type_name -> content_pb.ContentType
	0,  // 4: handle_temporary_contents_pb.CreateTemporaryContentRequest.content:type_name -> handle_temporary_contents_pb.OneOfContent
	0,  // 5: handle_temporary_contents_pb.CreateTemporaryContentResponse.created_content:type_name -> handle_temporary_contents_pb.OneOfContent
	15, // 6: handle_temporary_contents_pb.DeleteTemporaryContentRequest.content_type:type_name -> content_pb.ContentType
	0,  // 7: handle_temporary_contents_pb.DeleteTemporaryContentResponse.deleted_content:type_name -> handle_temporary_contents_pb.OneOfContent
	0,  // 8: handle_temporary_contents_pb.DeleteAllTemporaryContentsResponse.deleted_contents:type_name -> handle_temporary_contents_pb.OneOfContent
	15, // 9: handle_temporary_contents_pb.UpdateTemporaryContentRequest.content_type:type_name -> content_pb.ContentType
	0,  // 10: handle_temporary_contents_pb.UpdateTemporaryContentRequest.content:type_name -> handle_temporary_contents_pb.OneOfContent
	0,  // 11: handle_temporary_contents_pb.UpdateTemporaryContentResponse.updated_content:type_name -> handle_temporary_contents_pb.OneOfContent
	1,  // 12: handle_temporary_contents_pb.HandleTemporaryContents.PollTemporaryContents:input_type -> handle_temporary_contents_pb.PollTemporaryContentsRequest
	3,  // 13: handle_temporary_contents_pb.HandleTemporaryContents.CreateTemporaryContent:input_type -> handle_temporary_contents_pb.CreateTemporaryContentRequest
	5,  // 14: handle_temporary_contents_pb.HandleTemporaryContents.DeleteTemporaryContent:input_type -> handle_temporary_contents_pb.DeleteTemporaryContentRequest
	7,  // 15: handle_temporary_contents_pb.HandleTemporaryContents.DeleteAllTemporaryContents:input_type -> handle_temporary_contents_pb.DeleteAllTemporaryContentsRequest
	9,  // 16: handle_temporary_contents_pb.HandleTemporaryContents.UpdateTemporaryContent:input_type -> handle_temporary_contents_pb.UpdateTemporaryContentRequest
	11, // 17: handle_temporary_contents_pb.HandleTemporaryContents.CommitTemporaryContents:input_type -> handle_temporary_contents_pb.CommitTemporaryContentsRequest
	2,  // 18: handle_temporary_contents_pb.HandleTemporaryContents.PollTemporaryContents:output_type -> handle_temporary_contents_pb.PollTemporaryContentsResponse
	4,  // 19: handle_temporary_contents_pb.HandleTemporaryContents.CreateTemporaryContent:output_type -> handle_temporary_contents_pb.CreateTemporaryContentResponse
	6,  // 20: handle_temporary_contents_pb.HandleTemporaryContents.DeleteTemporaryContent:output_type -> handle_temporary_contents_pb.DeleteTemporaryContentResponse
	8,  // 21: handle_temporary_contents_pb.HandleTemporaryContents.DeleteAllTemporaryContents:output_type -> handle_temporary_contents_pb.DeleteAllTemporaryContentsResponse
	10, // 22: handle_temporary_contents_pb.HandleTemporaryContents.UpdateTemporaryContent:output_type -> handle_temporary_contents_pb.UpdateTemporaryContentResponse
	12, // 23: handle_temporary_contents_pb.HandleTemporaryContents.CommitTemporaryContents:output_type -> handle_temporary_contents_pb.CommitTemporaryContentsResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_handle_temporary_contents_handle_temporary_contents_proto_init() }
func file_handle_temporary_contents_handle_temporary_contents_proto_init() {
	if File_handle_temporary_contents_handle_temporary_contents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTemporaryContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollTemporaryContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemporaryContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemporaryContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTemporaryContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTemporaryContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllTemporaryContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllTemporaryContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemporaryContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTemporaryContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTemporaryContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTemporaryContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OneOfContent_Flashcard)(nil),
		(*OneOfContent_Mcq)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handle_temporary_contents_handle_temporary_contents_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handle_temporary_contents_handle_temporary_contents_proto_goTypes,
		DependencyIndexes: file_handle_temporary_contents_handle_temporary_contents_proto_depIdxs,
		MessageInfos:      file_handle_temporary_contents_handle_temporary_contents_proto_msgTypes,
	}.Build()
	File_handle_temporary_contents_handle_temporary_contents_proto = out.File
	file_handle_temporary_contents_handle_temporary_contents_proto_rawDesc = nil
	file_handle_temporary_contents_handle_temporary_contents_proto_goTypes = nil
	file_handle_temporary_contents_handle_temporary_contents_proto_depIdxs = nil
}
